#!/usr/bin/perl
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;

our $SERVICE_NAME = "pbs_pre";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;


#Constants
our $A_FACILITY_NAME;             *A_FACILITY_NAME =         \'urn:perun:facility:attribute-def:core:name';
our $A_FACILITY_IS_CLUSTER;       *A_FACILITY_IS_CLUSTER =   \'urn:perun:facility:attribute-def:def:isCluster';
our $A_USER_FACILITY_LOGIN;       *A_USER_FACILITY_LOGIN =   \'urn:perun:user_facility:attribute-def:virt:login';
our $A_FACILITY_PBS_SERVER;       *A_FACILITY_PBS_SERVER =   \'urn:perun:facility:attribute-def:def:pbsServer';
our $A_MEMBER_STATUS;             *A_MEMBER_STATUS =         \'urn:perun:member:attribute-def:core:status';



#Global data structure
our $STRUC_HOSTS;          *STRUC_HOSTS = \0;
our $STRUC_FACILITIES;     *STRUC_FACILITIES = \1;
our $struc = {};     #  $struc->{$user_login}->{$STRUC_HOSTS}->{$hostname} = 1;    #this mean user have access to host
#  $struc->{$user_login}->{$STRUC_FACILITIES}->{$facility_name} = 1;    #this mean user have access to cluster (facility)


my $agent = Perun::Agent->new();
my $facilitiesAgent = $agent->getFacilitiesAgent;
my $servicesAgent = $agent->getServicesAgent;
my $service = $servicesAgent->getServiceByName(name => $SERVICE_NAME);

my $pbsServer = $agent->getAttributesAgent->getAttribute(attributeName => $A_FACILITY_PBS_SERVER, facility => perunServicesInit::getFacility->getId)->getValue;

if($pbsServer ne perunServicesInit::getFacility->getName) {
	my $pbsServerFacility;
	$pbsServerFacility = $facilitiesAgent->getFacilityByName(name => $pbsServer);

	$servicesAgent->planServicePropagation(service => $service->getId, facility => $pbsServerFacility->getId);
	exit 0;
}

my @facilities = $facilitiesAgent->getAssignedFacilities(service => $service->getId);

foreach my $facility (@facilities) {
	my $data = $servicesAgent->getHierarchicalData(service => $service->getId, facility => $facility->getId);
	my %facilityAttributes = attributesToHash $data->getAttributes;

	if($facilityAttributes{$A_FACILITY_PBS_SERVER} ne $pbsServer) {
		next;
	}

	foreach my $resourceData ($data->getChildElements) {
		foreach my $memberData ($resourceData->getChildElements) {
			my %memberAttributes = attributesToHash $memberData->getAttributes;
			if($memberAttributes{$A_MEMBER_STATUS} ne 'VALID') { next; }
			my $login = $memberAttributes{$A_USER_FACILITY_LOGIN};

			if(defined($facilityAttributes{$A_FACILITY_IS_CLUSTER}) && $facilityAttributes{$A_FACILITY_IS_CLUSTER} == 1) {
				$struc->{$login}->{$STRUC_FACILITIES}->{$facilityAttributes{$A_FACILITY_NAME}} = 1;
			} else {
				$struc->{$login}->{$STRUC_HOSTS}->{$facilityAttributes{$A_FACILITY_NAME}} = 1;
			}
		}
	}
}


my $fileName = "$DIRECTORY/$::SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $!";

local $" = ",";
foreach my $login (sort keys %$struc) {
	my @hostsNames = keys %{$struc->{$login}->{$STRUC_HOSTS}};
	my @facilitiesNames = keys %{$struc->{$login}->{$STRUC_FACILITIES}};
	print FILE $login, ":", "@hostsNames", "&", "@facilitiesNames", "\n";
}
close (FILE);
perunServicesInit::finalize;
