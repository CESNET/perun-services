#!/usr/bin/perl
use feature "switch";
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;

local $::SERVICE_NAME = "vsup_web";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.4";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $fileName = "$DIRECTORY/$::SERVICE_NAME".".csv";
my $fileNameCAO = "$DIRECTORY/$::SERVICE_NAME"."_cao.csv";
my $fileNameEXT = "$DIRECTORY/$::SERVICE_NAME"."_ext.csv";
my $data = perunServicesInit::getDataWithGroups;

#Constants
our $A_LOGIN; *A_LOGIN = \'urn:perun:user_facility:attribute-def:virt:login';
our $A_UCO; *A_UCO= \'urn:perun:user:attribute-def:def:ucoVsup';
our $A_TITLE_BEFORE;  *A_TITLE_BEFORE = \'urn:perun:user:attribute-def:core:titleBefore';
our $A_FIRST_NAME;  *A_FIRST_NAME = \'urn:perun:user:attribute-def:core:firstName';
our $A_LAST_NAME;  *A_LAST_NAME = \'urn:perun:user:attribute-def:core:lastName';
our $A_TITLE_AFTER;  *A_TITLE_AFTER = \'urn:perun:user:attribute-def:core:titleAfter';
our $A_PHONE;  *A_PHONE = \'urn:perun:user:attribute-def:def:phoneDc2';
our $A_MOBILE;  *A_MOBILE = \'urn:perun:user:attribute-def:opt:mobilePhone';
our $A_EMAIL_PRIV;  *A_EMAIL_PRIV = \'urn:perun:user:attribute-def:opt:privateMail';
our $A_EMAIL_PRIV_KOS;  *A_EMAIL_PRIV_KOS = \'urn:perun:user:attribute-def:opt:privateMailKos';
our $A_PHONE_PRIV;  *A_PHONE_PRIV = \'urn:perun:user:attribute-def:opt:privatePhone';
our $A_FOTO;  *A_FOTO = \'urn:perun:user:attribute-def:def:cardPhoto';

our $A_VSUP_MAIL; *A_VSUP_MAIL= \'urn:perun:user:attribute-def:def:vsupMail';
our $A_VSUP_PREF_MAIL; *A_VSUP_PREF_MAIL= \'urn:perun:user:attribute-def:def:vsupPreferredMail';

our $A_ARTISTIC_FIRST_NAME; *A_ARTISTIC_FIRST_NAME = \'urn:perun:user:attribute-def:def:artisticFirstName';
our $A_ARTISTIC_LAST_NAME; *A_ARTISTIC_LAST_NAME = \'urn:perun:user:attribute-def:def:artisticLastName';

our $A_JOB;  *A_JOB = \'urn:perun:user:attribute-def:def:job';
our $A_JOB_ID;  *A_JOB_ID = \'urn:perun:user:attribute-def:def:jobId';
our $A_NS;  *A_NS = \'urn:perun:user:attribute-def:def:ns';
our $A_USER_ID;  *A_USER_ID = \'urn:perun:user:attribute-def:core:id';

our $A_G_NAME;  *A_G_NAME = \'urn:perun:group:attribute-def:core:name';
our $A_G_CAO_ORGAN;  *A_G_CAO_ORGAN = \'urn:perun:group:attribute-def:def:caoOrgan';
our $A_G_CAO_FUNKCE;  *A_G_CAO_FUNKCE = \'urn:perun:group:attribute-def:def:caoFunkce';
our $A_G_CAO_FUNKCE_ID;  *A_G_CAO_FUNKCE_ID = \'urn:perun:group:attribute-def:def:caoFunkceId';

our $A_R_RELATION_TYPE; *A_R_RELATION_TYPE = \'urn:perun:resource:attribute-def:def:relationType';

# GATHER USERS
my $users;  # $users->{$uco}->{ATTR} = $attrValue;
# Gather CAO membership
my $cao;    # $cao->{$organ}->{$funkce:$funkceId}->{$uco} = 1;
# Gather EXT membership
my $ext;   #  $ext->{$uco}->{ATTR} = $attrValue;

#
# AGGREGATE DATA
#
# FOR EACH USER
foreach my $rData ($data->getChildElements) {

	my %resourceAttributes = attributesToHash $rData->getAttributes;
	my $relationType = $resourceAttributes{$A_R_RELATION_TYPE};

	my @groupsData = ($rData->getChildElements)[0]->getChildElements;

	foreach my $group (@groupsData) {

		my %gAttributes = attributesToHash $group->getAttributes;

		my @membersData = ($group->getChildElements)[1]->getChildElements;
		foreach my $member (@membersData) {

			my %uAttributes = attributesToHash $member->getAttributes;

			my $uco = $uAttributes{$A_UCO};
			$users->{$uco}->{$A_LOGIN} = $uAttributes{$A_LOGIN};
			$users->{$uco}->{'EMAIL'} = ($uAttributes{$A_VSUP_PREF_MAIL} || ($uAttributes{$A_VSUP_MAIL} || $uAttributes{$A_LOGIN} . '@vsup.cz'));

			# personal
			$users->{$uco}->{$A_TITLE_BEFORE} = $uAttributes{$A_TITLE_BEFORE} || '';
			$users->{$uco}->{$A_FIRST_NAME} = ($uAttributes{$A_ARTISTIC_FIRST_NAME} || ($uAttributes{$A_FIRST_NAME} || ''));
			$users->{$uco}->{$A_LAST_NAME} = ($uAttributes{$A_ARTISTIC_LAST_NAME} || ($uAttributes{$A_LAST_NAME} || ''));
			$users->{$uco}->{$A_TITLE_AFTER} = $uAttributes{$A_TITLE_AFTER} || '';

			$users->{$uco}->{$A_FOTO} = $uAttributes{$A_FOTO} || '';

			# work contacts
			$users->{$uco}->{$A_PHONE} = $uAttributes{$A_PHONE} || '';
			$users->{$uco}->{$A_MOBILE} = $uAttributes{$A_MOBILE} || '';
			$users->{$uco}->{$A_EMAIL_PRIV} = $uAttributes{$A_EMAIL_PRIV} || ($uAttributes{$A_EMAIL_PRIV_KOS} || '');
			$users->{$uco}->{$A_PHONE_PRIV} = $uAttributes{$A_PHONE_PRIV} || '';

			# cao membership
			if (defined $gAttributes{$A_G_CAO_ORGAN} and length $gAttributes{$A_G_CAO_ORGAN}) {
				$cao->{$gAttributes{$A_G_CAO_ORGAN}}->{$gAttributes{$A_G_CAO_FUNKCE}.":".$gAttributes{$A_G_CAO_FUNKCE_ID}}->{$uco} = 1;
			}

			# external workers
			if (defined $relationType) {
				$ext->{$uco}->{"TYPE"} = $relationType;
				$ext->{$uco}->{$A_JOB} = $uAttributes{$A_JOB} || '';
				$ext->{$uco}->{$A_JOB_ID} = $uAttributes{$A_JOB_ID} || '';
				$ext->{$uco}->{$A_NS} = $uAttributes{$A_NS} || '';
				$ext->{$uco}->{$A_USER_ID} = $uAttributes{$A_USER_ID};
			}

		}
	}
}

#
# PRINT user data
#
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
binmode FILE, ":utf8";

# print personal info
my @keys = sort keys %{$users};
for my $uco (@keys) {

	# print attributes, which are never empty
	print FILE $uco . "\t" . $users->{$uco}->{$A_LOGIN} . "\t" . $users->{$uco}->{'EMAIL'} . "\t" .
		$users->{$uco}->{$A_TITLE_BEFORE} . "\t" . $users->{$uco}->{$A_FIRST_NAME} . "\t" .
		$users->{$uco}->{$A_LAST_NAME} . "\t" . $users->{$uco}->{$A_TITLE_AFTER} . "\t" .
		$users->{$uco}->{$A_PHONE} . "\t" . $users->{$uco}->{$A_MOBILE} . "\t" .
		$users->{$uco}->{$A_EMAIL_PRIV} . "\t" . $users->{$uco}->{$A_PHONE_PRIV} . "\t" .
		$users->{$uco}->{$A_FOTO} . "\n";

}

close(FILE);

open FILE,">$fileNameCAO" or die "Cannot open $fileNameCAO: $! \n";
binmode FILE, ":utf8";

# print CAO
my @cao_keys = sort keys %{$cao};
for my $ao (@cao_keys) {

	my @funkce = sort keys %{$cao->{$ao}};
	for my $fce (@funkce) {

		my ($fce_name, $fce_id) = split(":", $fce);

		for my $uco (sort keys %{$cao->{$ao}->{$fce}}) {

			# print attributes, which are never empty
			print FILE $uco."\t".$ao."\t".$fce_name."\t".$fce_id."\n";

		}

	}

}

close(FILE);

open FILE,">$fileNameEXT" or die "Cannot open $fileNameEXT: $! \n";
binmode FILE, ":utf8";

# print EXT
my @ext_keys = sort keys %{$ext};
for my $uco (@ext_keys) {

	# print attributes, which are never empty
	print FILE $uco . "\t" . $ext->{$uco}->{$A_USER_ID} . "\t" . $ext->{$uco}->{"TYPE"} . "\t" .
		$ext->{$uco}->{$A_JOB} . "\t" . $ext->{$uco}->{$A_JOB_ID} . "\t" . $ext->{$uco}->{$A_NS}  . "\n";

}

close(FILE);

perunServicesInit::finalize;
