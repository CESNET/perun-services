#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;

local $::SERVICE_NAME = "fedcloud_export";
local $::PROTOCOL_VERSION = "3.1.0";
my $SCRIPT_VERSION = "3.0.2";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedHierarchicalData;

#Constants
our $A_R_VO_SHORT_NAME;             *A_R_VO_SHORT_NAME =             \'urn:perun:resource:attribute-def:virt:voShortName';
our $A_USER_MAIL;                   *A_USER_MAIL =                   \'urn:perun:user:attribute-def:def:preferredMail';
our $A_MEMBER_STATUS;               *A_MEMBER_STATUS =               \'urn:perun:member:attribute-def:core:status';
our $A_USER_CERT_DNS;               *A_USER_CERT_DNS =               \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_USER_FACILITY_UID;           *A_USER_FACILITY_UID =           \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_USER_SSH_KEY;                *A_USER_SSH_KEY =                \'urn:perun:user:attribute-def:def:sshPublicKey';
our $A_F_DESTINATION_PLATFORM_MAP;  *A_F_DESTINATION_PLATFORM_MAP =  \'urn:perun:facility:attribute-def:def:cloudPlatformDestinationMap';
our $A_U_F_BLACKLISTED;             *A_U_F_BLACKLISTED =             \'urn:perun:user_facility:attribute-def:virt:blacklisted';

our $STATUS_VALID;                  *STATUS_VALID =                  \'VALID';

my $RECORD_SEPARATOR = chr 30;

my %destinationPlatformMap;
if (defined($data->getFacilityAttributeValue(attrName => $A_F_DESTINATION_PLATFORM_MAP))) {
	%destinationPlatformMap = %{$data->getFacilityAttributeValue(attrName => $A_F_DESTINATION_PLATFORM_MAP)};
}
$destinationPlatformMap{'all'} = 'opennebula'; #hard-coded default

for my $destination (keys %destinationPlatformMap) {
	my $destinationDirectory = getDestinationDirectory $destination;
	my $platformFileName = "$destinationDirectory/CLOUD_PLATFORM";
	open PLATFORM,">$platformFileName" or die "Cannot open $platformFileName: $! \n";
	print PLATFORM $destinationPlatformMap{$destination};
	close PLATFORM or die "Error closing file";
}

my $fileName = "$DIRECTORY/$::SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";

foreach my $resourceId ($data->getResourceIds()) {
	foreach my $memberId ($data->getMemberIdsForResource(resource => $resourceId)) {
		my $status = $data->getMemberAttributeValue(member => $memberId, attrName => $A_MEMBER_STATUS);
		my $blacklisted = $data->getUserFacilityAttributeValue(member => $memberId, attrName => $A_U_F_BLACKLISTED);
		if (($status eq $STATUS_VALID) && !defined($blacklisted)) {
			my @DNs = keys %{$data->getUserAttributeValue(member => $memberId, attrName => $A_USER_CERT_DNS)};
			# take DN with the biggest number (the last in perun)
			my $lastDN;
			foreach my $DN (@DNs) {
				if(!defined($lastDN)) { $lastDN=$DN; }
				else {
					my $lastDNNumber = $lastDN;
					$lastDNNumber =~ s/[:].*$//;
					my $DNNumber = $DN;
					$DNNumber =~ s/[:].*$//;
					if($DNNumber > $lastDNNumber) { $lastDN=$DN; }
				}
			}
			my $DN = $lastDN;
			# skip users without any certificates
			next if(!defined($DN));
			# strip prefix from certificate
			$DN =~ s/^[0-9]+[:]//;
			my $voShortName = $data->getResourceAttributeValue(resource => $resourceId, attrName => $A_R_VO_SHORT_NAME);
			my $uid = $voShortName . "_" . $data->getUserFacilityAttributeValue(member => $memberId, attrName => $A_USER_FACILITY_UID);

			my $userSshKey = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_SSH_KEY);
			my $sshKeys = "";
			if (defined $userSshKey) {
				$sshKeys = join '|', @{$userSshKey};
			}

			my $mail = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_MAIL);
			print FILE $uid, $RECORD_SEPARATOR, $voShortName, $RECORD_SEPARATOR, $DN, $RECORD_SEPARATOR, $mail, $RECORD_SEPARATOR, $sshKeys, "\n";
		}
	}
}

close (FILE) or die "Cannot close $fileName: $! \n";
perunServicesInit::finalize;
