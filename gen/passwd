#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use Date::Calc qw\Delta_Days\;

our $SERVICE_NAME = "passwd";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.2";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_FACILITY_MIN_UID;                       *A_FACILITY_MIN_UID =                      \'urn:perun:facility:attribute-def:virt:minUID';
our $A_FACILITY_MAX_UID;                       *A_FACILITY_MAX_UID =                      \'urn:perun:facility:attribute-def:virt:maxUID';
our $A_USER_LOGIN;                             *A_USER_LOGIN =                            \'urn:perun:user_facility:attribute-def:virt:login';
our $A_USER_FACILITY_UID;                      *A_USER_FACILITY_UID =                     \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_USER_FACILITY_GID;                      *A_USER_FACILITY_GID =                     \'urn:perun:user_facility:attribute-def:virt:defaultUnixGID';
our $A_USER_FACILITY_HOME_MOUNT_POINT;         *A_USER_FACILITY_HOME_MOUNT_POINT =        \'urn:perun:user_facility:attribute-def:def:homeMountPoint';
our $A_USER_FACILITY_SHELL;                    *A_USER_FACILITY_SHELL =                   \'urn:perun:user_facility:attribute-def:virt:shell';
our $A_USER_FIRST_NAME;                        *A_USER_FIRST_NAME =                       \'urn:perun:user:attribute-def:core:firstName';
our $A_USER_LAST_NAME;                         *A_USER_LAST_NAME =                        \'urn:perun:user:attribute-def:core:lastName';
our $A_USER_STATUS;                            *A_USER_STATUS =                           \'urn:perun:member:attribute-def:core:status';
our $A_USER_EXPIRATION;                        *A_USER_EXPIRATION =                       \'urn:perun:member:attribute-def:def:membershipExpiration';
our $A_R_VO_SHORT_NAME;                        *A_R_VO_SHORT_NAME =                       \'urn:perun:resource:attribute-def:virt:voShortName';

our $STATUS_SUSPENDED;                         *STATUS_SUSPENDED =                        \'SUSPENDED';
our $STATUS_VALID;                             *STATUS_VALID =                            \'VALID';

my $passwd_file_name = "$DIRECTORY/$::SERVICE_NAME";
my $shadow_file_name = "$DIRECTORY/shadow";
my $min_uid_file_name = "$DIRECTORY/min_uid";
my $max_uid_file_name = "$DIRECTORY/max_uid";

my $sortingFunction = getAttributeSorting $A_USER_LOGIN, 1;

###### min_uid and max_uid file #####
open MIN_UID,">$min_uid_file_name" or die "Cannot open $min_uid_file_name: $! \n";
open MAX_UID,">$max_uid_file_name" or die "Cannot open $max_uid_file_name: $! \n";

my %facilityAttributes = attributesToHash $data->getAttributes;
print MIN_UID $facilityAttributes{$A_FACILITY_MIN_UID}, "\n";
print MAX_UID $facilityAttributes{$A_FACILITY_MAX_UID}, "\n";
close MIN_UID;
close MAX_UID;
#####################################

####### passswd and shadow file ######################
open PASSWD,">$passwd_file_name" or die "Cannot open $passwd_file_name: $! \n";
open SHADOW,">$shadow_file_name" or die "Cannot open $shadow_file_name: $! \n";

# Set restrictive rights on SHADOW file
chmod 0640, $shadow_file_name;

my @membersAttributes;
my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my @membersData = $rData->getChildElements;
	push @membersAttributes, dataToAttributesHashes @membersData;
}

#Covert all members attributes to hash memberAttributesByLogin to eliminate duplicities
my %memberAttributesByLogin = ();
foreach my $memberAttributes (@membersAttributes) {
	my $login = $memberAttributes->{$A_USER_LOGIN};

	#set $memberAttributes->{$A_USER_EXPIRATION} to number of days since epoch
	#if member is not valid set expiration to 1
	if($memberAttributes->{$A_USER_STATUS} eq $STATUS_VALID) {
		if(! $memberAttributes->{$A_USER_EXPIRATION}) {
			$memberAttributes->{$A_USER_EXPIRATION} = "";
		} else {
			my ($year, $month, $day) = unpack "A4xA2xA2", $memberAttributes->{$A_USER_EXPIRATION};
			$memberAttributes->{$A_USER_EXPIRATION} = Delta_Days(1970, 1, 1, $year, $month, $day);
		}
	} else {
		$memberAttributes->{$A_USER_EXPIRATION} = 1;
	}

	unless(defined $memberAttributesByLogin{$login}) {
		$memberAttributesByLogin{$login} = $memberAttributes;
	} else {
		my $m = $memberAttributesByLogin{$login};       # $m is reference, so by modifying it we also modified  $memberAttributesByLogin{$login}

		if($m->{$A_USER_STATUS} eq $STATUS_SUSPENDED) { next; } #member is suspended - no change allowed

		if($memberAttributes->{$A_USER_STATUS} eq $STATUS_SUSPENDED) {
			$m->{$A_USER_STATUS} = $STATUS_SUSPENDED;
			$m->{$A_USER_EXPIRATION} = 1;
		} elsif($memberAttributes->{$A_USER_STATUS} eq $STATUS_VALID) {
			$m->{$A_USER_STATUS} = $STATUS_VALID;
			if($m->{$A_USER_EXPIRATION} eq "" || $memberAttributes->{$A_USER_EXPIRATION} eq "") {
				$m->{$A_USER_EXPIRATION} = "";
			} else {
				$m->{$A_USER_EXPIRATION} = $memberAttributes->{$A_USER_EXPIRATION} unless $m->{$A_USER_EXPIRATION} > $memberAttributes->{$A_USER_EXPIRATION};
			}
		}
	}

}

#print data to files
foreach my $memberAttributes (sort $sortingFunction (values %memberAttributesByLogin)) {
	print PASSWD $memberAttributes->{$A_USER_LOGIN}.":x:";
	print PASSWD $memberAttributes->{$A_USER_FACILITY_UID}.":";
	print PASSWD $memberAttributes->{$A_USER_FACILITY_GID}.":";
	my $firstName = defined($memberAttributes->{$A_USER_FIRST_NAME}) ? $memberAttributes->{$A_USER_FIRST_NAME} : '';
	my $lastName = defined($memberAttributes->{$A_USER_LAST_NAME}) ? $memberAttributes->{$A_USER_LAST_NAME} : '';
	print PASSWD unidecode($firstName)." ";
	print PASSWD unidecode($lastName).":";
	print PASSWD $memberAttributes->{$A_USER_FACILITY_HOME_MOUNT_POINT}."/".$memberAttributes->{$A_USER_LOGIN}.":";
	print PASSWD $memberAttributes->{$A_USER_FACILITY_SHELL};
	print PASSWD "\n";

	print SHADOW $memberAttributes->{$A_USER_LOGIN}.":x::::::", $memberAttributes->{$A_USER_EXPIRATION} ,":";
	print SHADOW "\n";
}

close(PASSWD);
close(SHADOW);
#####################################################
perunServicesInit::finalize;
