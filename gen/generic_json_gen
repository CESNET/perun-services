#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use JSON::XS;

our $SERVICE_NAME = "generic_json_gen";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

our $JSON_FORMAT = "json";
# Get information about service and its attributes
perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedDataWithGroups;

my $agent = perunServicesInit->getAgent;
my $attributesAgent = $agent->getAttributesAgent;
my $servicesAgent = $agent->getServicesAgent;
my $service = $servicesAgent->getServiceByName(name => $::SERVICE_NAME);
# Get all required attributes definitions for this service
my @requiredAttributesDefinitions = $attributesAgent->getRequiredAttributesDefinition(service => $service->getId);

# Constant attributes
our $A_R_UUID;
*A_R_UUID = \'urn:perun:resource:attribute-def:core:uuid';
our $A_G_UUID;
*A_G_UUID = \'urn:perun:group:attribute-def:core:uuid';
our $A_V_UUID;
*A_V_UUID = \'urn:perun:vo:attribute-def:core:uuid';
our $A_U_UUID;
*A_U_UUID = \'urn:perun:user:attribute-def:core:uuid';
our $A_F_UUID;
*A_F_UUID = \'urn:perun:facility:attribute-def:core:uuid';

my $DEBUG = 0;

sub generateDefaultValue {
	my $entity = shift;
	my $type = shift;

	if ($entity eq "virt") {
		return undef;
	}
	if ($type eq "integer") {
		return undef;
	}
	elsif ($type eq "string") {
		return "";
	}
	elsif ($type eq "array") {
		return [];
	}
	elsif ($type eq "hash") {
		return {};
	}
	elsif ($type eq "boolean") {
		return JSON::XS::false;
	}
	else {
		die("Unknown type $type");
	}
}

# Check attribute definitions, if all required attributes are present, group them by entity
my $requiredAttributes = {
	"facility"        => {},
	"vo"              => {},
	"group"           => {},
	"resource"        => {},
	"group_resource"  => {},
	"user"            => {},
	"user_facility"   => {},
	"member"          => {},
	"member_resource" => {},
	"member_group"    => {},
};
for my $attribute (@requiredAttributesDefinitions) {
	my $namespace = $attribute->getNamespace();
	my @namespaceParts = split(":", $namespace);
	my $entity = $namespaceParts[2];
	my $urn = $namespace . ":" . $attribute->getFriendlyName;
	$requiredAttributes->{$entity}->{$urn} = generateDefaultValue($namespaceParts[4], $attribute->getType);
}

sub checkRequiredAttributes {
	my $attributes = shift;

	# If entity attribute, uuid is required
	# If mixed entity attribute, uuids of both entities are required
	# If attribute is not present, die

	# Facility
	if (keys %{$attributes->{"facility"}} >= 1) {
		if (!exists($attributes->{"facility"}->{$A_F_UUID})) {
			die("Facility attribute detected, but $A_F_UUID is not present");
		}
	}

	# VO
	if (keys %{$attributes->{"vo"}} >= 1) {
		if (!exists($attributes->{"vo"}->{$A_V_UUID})) {
			die("Vo attribute detected, but $A_V_UUID is not present");
		}
	}

	# Group
	if (keys %{$attributes->{"group"}} >= 1) {
		if (!exists($attributes->{"group"}->{$A_G_UUID})) {
			die("Group attribute detected, but $A_G_UUID is not present");
		}
	}

	# Resource
	if (keys %{$attributes->{"resource"}} >= 1) {
		if (!exists($attributes->{"resource"}->{$A_R_UUID})) {
			die("Resource attribute detected, but $A_R_UUID is not present");
		}
	}

	# Group-Resource
	if (keys %{$attributes->{"group_resource"}} >= 1) {
		my $shouldDie = 0;
		if (!exists($attributes->{"group"}->{$A_G_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"resource"}->{$A_R_UUID})) {
			$shouldDie = 1;
		}
		if ($shouldDie) {
			die("Group-Resource attribute detected, but $A_G_UUID or $A_R_UUID is not present");
		}
	}

	# User
	if (keys %{$attributes->{"user"}} >= 1) {
		if (!exists($attributes->{"user"}->{$A_U_UUID})) {
			die("User attribute detected, but $A_U_UUID is not present");
		}
	}

	# User-Facility
	if (keys %{$attributes->{"user_facility"}} >= 1) {
		my $shouldDie = 0;
		if (!exists($attributes->{"user"}->{$A_U_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"facility"}->{$A_F_UUID})) {
			$shouldDie = 1;
		}
		if ($shouldDie) {
			die("User-Facility attribute detected, but $A_U_UUID or $A_F_UUID is not present");
		}
	}

	# Member
	if (keys %{$attributes->{"member"}} >= 1) {
		my $shouldDie = 0;
		if (!exists($attributes->{"user"}->{$A_U_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"vo"}->{$A_V_UUID})) {
			$shouldDie = 1;
		}
		if ($shouldDie) {
			die("Member attribute detected, but $A_U_UUID or $A_V_UUID is not present");
		}
	}

	# Member-Resource
	if (keys %{$attributes->{"member_resource"}} >= 1) {
		my $shouldDie = 0;
		if (!exists($attributes->{"user"}->{$A_U_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"vo"}->{$A_V_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"resource"}->{$A_R_UUID})) {
			$shouldDie = 1;
		}
		if ($shouldDie) {
			die("Member-Resource attribute detected, but $A_U_UUID or $A_V_UUID or $A_R_UUID is not present");
		}
	}

	# Member-Group
	if (keys %{$attributes->{"member_group"}} >= 1) {
		my $shouldDie = 0;
		if (!exists($attributes->{"user"}->{$A_U_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"vo"}->{$A_V_UUID})) {
			$shouldDie = 1;
		}
		if (!exists($attributes->{"group"}->{$A_G_UUID})) {
			$shouldDie = 1;
		}
		if ($shouldDie) {
			die("Member-Group attribute detected, but $A_U_UUID or $A_V_UUID or $A_G_UUID is not present");
		}
	}
}

# Check if facility uuid is present, die if not
if (!exists($requiredAttributes->{"facility"}->{$A_F_UUID})) {
	die("Attribute $A_F_UUID is required for this service");
}

# Check if all required attributes are present
checkRequiredAttributes($requiredAttributes);

# Get constant information for facility
my $facility = perunServicesInit::getFacility;
my $facilityName = $facility->getName;
my $facilityUuid = $data->getFacilityAttributeValue(attrName => $A_F_UUID);
if ($DEBUG == 1) {
	print("Generating JSON for facility '" . $facilityName . "'\n");
}
# Signal the SLAVE that we are generating generic JSON
perunServicesInit::updateGenericJsonLookup();

my @destinations = $servicesAgent->getDestinations(service => $service->getId, facility => $facility->getId);
my @facilityDestinations;
for my $destination (@destinations) {
	push(@facilityDestinations, $destination->getDestination);
}

my $facilityAttributes = $data->getAllFacilityAttributes();
# Remove facility uuid from attributes
delete($facilityAttributes->{$A_F_UUID});

# Init Structure
my $output = {
	"metadata" => {
		"version"  => $SCRIPT_VERSION,
		"facility" => {
			"facilityUuid" => $facilityUuid,
			"facilityName" => $facilityName,
			"destinations" => \@facilityDestinations,
			"attributes"   => $facilityAttributes,
		}
	}
};

# Generate structure with required attributes
# For fast lookup of UUID <-> ID mapping
my $lookup = {
	"uuids" => {},        # UUID -> ID mapping
	"ids"   => {          # ID -> UUID mapping
		"vo"       => {}, # VO ID -> UUID mapping
		"group"    => {}, # Group ID -> UUID mapping
		"resource" => {}, # Resource ID -> UUID mapping
	},
};

# VOs
# Skip VOs if VO UUID is not present
if (exists($requiredAttributes->{"vo"}->{$A_V_UUID})) {

	if ($DEBUG == 1) {
		print("Generating JSON for VOs\n");
	}
	$output->{vos} = {};
	for my $voId ($data->getVoIds()) {
		# If we know, that the VOs UUID has to be present, we can use it
		my $voUUID = $data->getVoAttributeValue(vo => $voId, attrName => $A_V_UUID);
		next if (exists($output->{vos}->{$voUUID}));

		# Lookup update
		$lookup->{uuids}->{$voUUID} = $voId;
		$lookup->{ids}->{vo}->{$voId} = $voUUID;

		my $voAttributes = $data->getAllVoAttributes(vo => $voId);
		# Remove VO UUID from attributes
		delete($voAttributes->{$A_V_UUID});

		my $voobj = {
			"attributes" => $voAttributes || {},
		};
		$output->{vos}->{$voUUID} = $voobj;
	}
}

# Groups
# Skip Groups if Group UUID is not present
if (exists($requiredAttributes->{"group"}->{$A_G_UUID})) {

	if ($DEBUG == 1) {
		print("Generating JSON for groups\n");
	}
	$output->{groups} = {};
	for my $groupId ($data->getGroupIds()) {
		my $groupUUID = $data->getGroupAttributeValue(group => $groupId, attrName => $A_G_UUID);
		next if (exists($output->{groups}->{$groupUUID}));

		# Lookup update
		$lookup->{uuids}->{$groupUUID} = $groupId;
		$lookup->{ids}->{group}->{$groupId} = $groupUUID;

		my $groupAttributes = $data->getAllGroupAttributes(group => $groupId);
		delete($groupAttributes->{$A_G_UUID});

		my $groupobj = {
			"attributes" => $groupAttributes || {},
		};

		# If VO UUID is present, add `voUuid` to group
		if (exists($requiredAttributes->{"vo"}->{$A_V_UUID})) {
			my $voId = $data->getVoIdForGroup(group => $groupId);
			$groupobj->{"voUuid"} = $lookup->{ids}->{vo}->{$voId};
		}
		$output->{groups}->{$groupUUID} = $groupobj;
	}
}

# Resources
# Skip Resources if Resource UUID is not present
if (exists($requiredAttributes->{"resource"}->{$A_R_UUID})) {
	if ($DEBUG == 1) {
		print("Generating JSON for resources\n");
	}
	$output->{resources} = {};
	for my $resourceId ($data->getResourceIds()) {
		my $resourceUUID = $data->getResourceAttributeValue(resource => $resourceId, attrName => $A_R_UUID);
		next if (exists($output->{resources}->{$resourceUUID}));

		# Lookup update
		$lookup->{"uuids"}->{$resourceUUID} = $resourceId;
		$lookup->{"ids"}->{"resource"}->{$resourceId} = $resourceUUID;

		my $resourceAttributes = $data->getAllResourceAttributes(resource => $resourceId);
		delete($resourceAttributes->{$A_R_UUID});

		my $resourceobj = {
			"attributes" => $resourceAttributes || {},
		};

		if (exists($requiredAttributes->{"vo"}->{$A_V_UUID})) {
			my $voId = $data->getVoIdForResource(resource => $resourceId);
			$resourceobj->{"voUuid"} = $lookup->{ids}->{vo}->{$voId};
		}

		if (exists($requiredAttributes->{"group"}->{$A_G_UUID})) {
			my %group_attributes;
			for my $groupId ($data->getGroupIdsForResource(resource => $resourceId)) {
				my $groupUUID = $lookup->{ids}->{group}->{$groupId};
				# Fill Group attributes
				my $attrs = $data->getAllGroupResourceAttributes(resource => $resourceId, group => $groupId);
				$group_attributes{$groupUUID} = {
					"attributes" => $attrs || {},
				};
			}
			$resourceobj->{"assigned_groups"} = \%group_attributes;
		}
		$output->{resources}->{$resourceUUID} = $resourceobj;
	}
}

# Users
# Skip Users if User UUID is not present
if (exists($requiredAttributes->{"user"}->{$A_U_UUID})) {
	if ($DEBUG == 1) {
		print("Generating JSON for users\n");
	}
	$output->{users} = {};
	for my $memberId ($data->getMemberIdsForFacility()) {
		my $userId = $data->getUserIdForMember(member => $memberId);
		my $userUUID = $data->getUserAttributeValue(member => $memberId, attrName => $A_U_UUID);

		next if (exists($output->{users}->{$userUUID}));

		# Lookup update
		$lookup->{uuids}->{$userUUID} = $userId;
		$lookup->{ids}->{user}->{$userId} = $userUUID;

		my %other_attributes;
		my $user_attributes = $data->getAllUserAttributes(member => $memberId);
		for my $attr (keys %$user_attributes) {
			next if ($attr eq $A_U_UUID);
			$other_attributes{$attr} = $user_attributes->{$attr};
		}
		my $user_facility_attributes = $data->getAllUserFacilityAttributes(member => $memberId);
		for my $attr (keys %$user_facility_attributes) {
			$other_attributes{$attr} = $user_facility_attributes->{$attr};
		}

		my $userobj = {
			"attributes" => \%other_attributes || {},
		};

		if (exists($requiredAttributes->{"vo"}->{$A_V_UUID})) {
			my $voId = $data->getVoIdForMember(member => $memberId);
			my $voUUID = $lookup->{ids}->{vo}->{$voId};
			$userobj->{"allowed_vos"}->{$voUUID} = {
				"attributes" => $data->getAllMemberAttributes(member => $memberId, vo => $voId) || {},
			};
		}

		# Group - Member
		if (exists($requiredAttributes->{"group"}->{$A_G_UUID})) {
			my %group_attributes;
			for my $groupId ($data->getGroupIdsForMember(member => $memberId)) {
				my $groupUUID = $lookup->{ids}->{group}->{$groupId};
				# Fill Group attributes
				my $attrs = $data->getAllMemberGroupAttributes(member => $memberId, group => $groupId);
				$group_attributes{$groupUUID} = {
					"attributes" => $attrs || {}
				};
			}
			$userobj->{"allowed_groups"} = \%group_attributes;
		}

		if (exists($requiredAttributes->{"resource"}->{$A_R_UUID})) {
			my %resource_attributes;
			for my $resourceId ($data->getResourceIdsForMember(member => $memberId)) {
				my $resourceUUID = $lookup->{ids}->{resource}->{$resourceId};
				# Fill Resource attributes
				my $r_attrs = $data->getAllMemberResourceAttributes(member => $memberId, resource => $resourceId);
				$resource_attributes{$resourceUUID} = {
					"attributes" => $r_attrs || {}
				};
			}
			$userobj->{"allowed_resources"} = \%resource_attributes;
		}
		$output->{users}->{$userUUID} = $userobj;
	}
}

if ($DEBUG == 1) {
	print("Cleaning up JSON\n");
}

sub cleanupStructure {
	my $root = shift;

	# If not HASH, return
	return unless ref($root) eq "HASH";

	foreach my $key (keys %$root) {
		# Recursively call crawl first, then check if it is undef, if yes, delete it
		cleanupStructure($root->{$key});

		my $item = $root->{$key};
		my @list = $key =~ /(urn:perun:(facility|group|group_resource|member|member_resource|resource|user|user_facility|vo):attribute-def:(def|opt|core|virt):.*)/g;
		if (scalar @list != 0) {
			my $entity = $list[1];
			my $def = $list[2];

			# If non-virtual attribute is undef, consult the requiredAttributes hash and set it to default value
			if (!($def eq "virt") && !defined($item)) {
				$root->{$key} = $requiredAttributes->{$entity}->{$key};
			}
		}
	}
}
cleanupStructure($output);
# Pretty print $output
my $file = "$DIRECTORY/$::SERVICE_NAME.json";
open FILE_USERS, ">$file" or die "Cannot open $file: $! \n";
print FILE_USERS JSON::XS->new->utf8->pretty->canonical->encode($output), "\n";
close(FILE_USERS) or die "Cannot close $file: $! \n";

perunServicesInit::finalize;
