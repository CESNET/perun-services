#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use JSON::XS;
use Data::Dumper;

our $SERVICE_NAME = "generic_json_gen";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

# Get information about service and its attributes
perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedDataWithGroups;

my $agent = perunServicesInit->getAgent;
my $attributesAgent = $agent->getAttributesAgent;
my $servicesAgent = $agent->getServicesAgent;
my $service = $servicesAgent->getServiceByName(name => $::SERVICE_NAME);
# Get all required attributes definitions for this service
my @requiredAttributesDefinitions = $attributesAgent->getRequiredAttributesDefinition(service => $service->getId);

# Constant attributes
our $A_R_UUID;
*A_R_UUID = \'urn:perun:resource:attribute-def:core:uuid';
our $A_G_UUID;
*A_G_UUID = \'urn:perun:group:attribute-def:core:uuid';
our $A_V_UUID;
*A_V_UUID = \'urn:perun:vo:attribute-def:core:uuid';
our $A_U_UUID;
*A_U_UUID = \'urn:perun:user:attribute-def:core:uuid';
our $A_F_UUID;
*A_F_UUID = \'urn:perun:facility:attribute-def:core:uuid';

my $DEBUG = 0;

# Check attribute definitions, if all required attributes are present, group them by entity
my $requiredAttributes = {
	"facility"        => {},
	"vo"              => {},
	"group"           => {},
	"group_resource"  => {},
	"resource"        => {},
	"user"            => {},
	"user_facility"   => {},
	"member"          => {},
	"member_resource" => {},
	"member_group"    => {},
};
for my $attribute (@requiredAttributesDefinitions) {
	my $namespace = $attribute->getNamespace();
	my @namespaceParts = split(":", $namespace);
	my $entity = $namespaceParts[2];
	my $urn = $namespace . ":" . $attribute->getFriendlyName;
	$requiredAttributes->{$entity}->{$urn} = undef;
}
# Check if const attributes are present
if (!exists($requiredAttributes->{"facility"}->{$A_F_UUID})) {
	die("Attribute $A_F_UUID is required for this service");
}
if (!exists($requiredAttributes->{"vo"}->{$A_V_UUID})) {
	die("Attribute $A_V_UUID is required for this service");
}
if (!exists($requiredAttributes->{"group"}->{$A_G_UUID})) {
	die("Attribute $A_G_UUID is required for this service");
}
if (!exists($requiredAttributes->{"resource"}->{$A_R_UUID})) {
	die("Attribute $A_R_UUID is required for this service");
}
if (!exists($requiredAttributes->{"user"}->{$A_U_UUID})) {
	die("Attribute $A_U_UUID is required for this service");
}

# Get constant information for facility
my $facility = perunServicesInit::getFacility;
my $facilityName = $facility->getName;
my $facilityUuid = $data->getFacilityAttributeValue(attrName => $A_F_UUID);
if ($DEBUG == 1) {
	print("Generating JSON for facility '" . $facilityName . "'\n");
}
# Signal the SLAVE that we are generating generic JSON
perunServicesInit::updateGenericJsonLookup();

my @destinations = $servicesAgent->getDestinations(service => $service->getId, facility => $facility->getId);
my @facilityDestinations;
for my $destination (@destinations) {
	push(@facilityDestinations, $destination->getDestination);
}

# Init Structure
my $output = {
	"metadata"  => {
		"version"  => $SCRIPT_VERSION,
		"facility" => {
			"facility_uuid" => $facilityUuid,
			"facility_name" => $facilityName,
			"destinations"  => \@facilityDestinations,
			"attributes"    => $data->getAllFacilityAttributes(),
		}
	},
	"users"     => {}, # Fill later
	"vos"       => {}, # Fill later
	"groups"    => {}, # Fill later
	"resources" => {}  # Fill later
};

# Generate structure with required attributes
# For fast lookup of UUID <-> ID mapping
my $lookup = {
	"uuids" => {},        # UUID -> ID mapping
	"ids"   => {          # ID -> UUID mapping
		"vo"       => {}, # VO ID -> UUID mapping
		"group"    => {}, # Group ID -> UUID mapping
		"resource" => {}, # Resource ID -> UUID mapping
	},
};

# VOs
if ($DEBUG == 1) {
	print("Generating JSON for VOs\n");
}
for my $voId ($data->getVoIds()) {
	# If we know, that the VOs UUID has to be present, we can use it
	my $voUUID = $data->getVoAttributeValue(vo => $voId, attrName => $A_V_UUID);
	# Lookup update
	$lookup->{uuids}->{$voUUID} = $voId;
	$lookup->{ids}->{vo}->{$voId} = $voUUID;

	my $voobj = {
		"attributes" => $data->getAllVoAttributes(vo => $voId),
	};
	$output->{vos}->{$voUUID} = $voobj;
}

# Groups
if ($DEBUG == 1) {
	print("Generating JSON for groups\n");
}
for my $groupId ($data->getGroupIds()) {
	my $groupUUID = $data->getGroupAttributeValue(group => $groupId, attrName => $A_G_UUID);
	# Lookup update
	$lookup->{uuids}->{$groupUUID} = $groupId;
	$lookup->{ids}->{group}->{$groupId} = $groupUUID;

	my $voId = $data->getVoIdForGroup(group => $groupId);
	my $groupobj = {
		"voUuid"     => $lookup->{ids}->{vo}->{$voId},
		"attributes" => $data->getAllGroupAttributes(group => $groupId),
	};
	$output->{groups}->{$groupUUID} = $groupobj;
}

# Resources
if ($DEBUG == 1) {
	print("Generating JSON for resources\n");
}
for my $resourceId ($data->getResourceIds()) {
	my $resourceUUID = $data->getResourceAttributeValue(resource => $resourceId, attrName => $A_R_UUID);
	# Lookup update
	$lookup->{"uuids"}->{$resourceUUID} = $resourceId;
	$lookup->{"ids"}->{"resource"}->{$resourceId} = $resourceUUID;

	# Resource attributes
	my %resource_group_attributes;
	for my $groupId ($data->getGroupIdsForResource(resource => $resourceId)) {
		my $groupUUID = $lookup->{ids}->{group}->{$groupId};
		# Fill Group attributes
		my $attrs = $data->getAllGroupResourceAttributes(resource => $resourceId, group => $groupId);
		$resource_group_attributes{$groupUUID} = $attrs;
	}

	my $voId = $data->getVoIdForResource(resource => $resourceId);
	my $resourceobj = {
		"voUuid"          => $lookup->{ids}->{vo}->{$voId},
		"attributes"      => $data->getAllResourceAttributes(resource => $resourceId),
		"assigned_groups" => \%resource_group_attributes,
	};
	$output->{resources}->{$resourceUUID} = $resourceobj;
}

# Users
if ($DEBUG == 1) {
	print("Generating JSON for users\n");
}
for my $memberId ($data->getMemberIdsForFacility()) {
	my $userId = $data->getUserIdForMember(member => $memberId);
	my $userUUID = $data->getUserAttributeValue(member => $memberId, attrName => $A_U_UUID);
	if (!defined($userUUID)) {
		die("ERROR: Member $memberId has no UUID\n");
	}

	# Lookup update
	$lookup->{uuids}->{$userUUID} = $userId;
	$lookup->{ids}->{user}->{$userId} = $userUUID;

	my $voId = $data->getVoIdForMember(member => $memberId);
	my $voUUID = $lookup->{ids}->{vo}->{$voId};

	# Fill Vo attributes
	my $vo_attributes = $data->getAllMemberAttributes(member => $memberId, vo => $voId);

	# Group - Member
	my %group_attributes;
	for my $groupId ($data->getGroupIdsForVo(vo => $voId)) {
		my $groupUUID = $lookup->{ids}->{group}->{$groupId};
		# Fill Group attributes
		my $g_attrs = $data->getAllMemberGroupAttributes(member => $memberId, group => $groupId);
		$group_attributes{$voUUID}->{$groupUUID} = $g_attrs;
	}

	# Resource - Member
	my %resource_attributes;
	for my $resourceId ($data->getResourceIdsForMember(member => $memberId)) {
		my $resourceUUID = $lookup->{ids}->{resource}->{$resourceId};
		# Fill Resource attributes
		my $r_attrs = $data->getAllMemberResourceAttributes(member => $memberId, resource => $resourceId);
		$resource_attributes{$voUUID}->{$resourceUUID} = $r_attrs;
	}

	my %other_attributes;
	if (exists($output->{users}->{$userUUID}->{attributes})) {
		# We can safely skip loading attributes, because they are already loaded
		%other_attributes = $output->{users}->{$userUUID}->{attributes};
	} else {
		my $user_attributes = $data->getAllUserAttributes(member => $memberId);
		for my $attr (keys %$user_attributes) {
			$other_attributes{$attr} = $user_attributes->{$attr};
		}
		my $user_facility_attributes = $data->getAllUserFacilityAttributes(member => $memberId);
		for my $attr (keys %$user_facility_attributes) {
			$other_attributes{$attr} = $user_facility_attributes->{$attr};
		}
	}

	my $userobj = {
		"allowed_vos"       => $vo_attributes,
		"allowed_groups"    => \%group_attributes,
		"allowed_resources" => \%resource_attributes,
		"attributes"        => \%other_attributes,
	};
	$output->{users}->{$userUUID} = $userobj;
}

if ($DEBUG == 1) {
	print("Cleaning up JSON\n");
}
# Removes: undef, empty arrays, empty hashes
sub crawlFlatten {
	my $value = shift;

	# If not HASH, return
	return unless ref($value) eq "HASH";

	foreach my $key (keys %$value) {
		# Recursively call crawl first, then check if it is undef, if yes, delete it
		crawlFlatten($value->{$key});

		my $item = $value->{$key};
		# Check if it is undef, if yes, delete it
		if (!defined($item)) {
			delete($value->{$key});
			next;
		}

		# Check if the key is UUID, if yes, delete it
		if ($key =~ m/urn:perun:(facility|vo|group|resource|user):attribute-def:core:uuid/) {
			delete($value->{$key});
			next;
		}

		# Check if it is array, if yes, check if it is empty, if yes, delete it
		if (ref($value->{$key}) eq "ARRAY") {
			if (scalar(@{$value->{$key}}) == 0) {
				delete($value->{$key});
				next;
			}
		}
		# Check if it is hash, if yes, check if it is empty, if yes, delete it
		if (ref($value->{$key}) eq "HASH") {
			if (scalar(keys %{$value->{$key}}) == 0) {
				delete($value->{$key});
				next;
			}
		}

	}
}

crawlFlatten($output);
# Pretty print $output
my $file = "$DIRECTORY/$::SERVICE_NAME.json";
open FILE_USERS, ">$file" or die "Cannot open $file: $! \n";
print FILE_USERS JSON::XS->new->utf8->pretty->canonical->encode($output), "\n";
close(FILE_USERS) or die "Cannot close $file: $! \n";

perunServicesInit::finalize;
