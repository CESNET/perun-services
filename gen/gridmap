#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;

local $::SERVICE_NAME = "gridmap";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedHierarchicalData;

#Constants
our $A_USER_LOGINS;			*A_USER_LOGINS =       \'urn:perun:user:attribute-def:virt:kerberosLogins';
our $A_USER_CERT_DNS;		*A_USER_CERT_DNS =     \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_R_GRIDMAP_FILE;  *A_R_GRIDMAP_FILE =    \'urn:perun:resource:attribute-def:def:gridmapFile';

my $fileName = "$DIRECTORY/$::SERVICE_NAME";

# Create structure $map->{$login, $userCertDN}
my @map;

# "user's DN: kerberosLogin

foreach my $resourceId ($data->getResourceIds()) {
	foreach my $memberId ($data->getMemberIdsForResource(resource => $resourceId)) {
		foreach my $login (@{$data->getUserAttributeValue(attrName => $A_USER_LOGINS, member => $memberId)}) {
			foreach my $subjectDN (keys %{$data->getUserAttributeValue(attrName => $A_USER_CERT_DNS, member => $memberId)}) {
				my @entry = ($subjectDN, $login);
				push(@map, \@entry);
			}
		}
	}
}

my %entries = ();
foreach my $entry (@map) {
	foreach my $entry (@map) {
		my $subjectDNEntry = $$entry[0];
		#remove prefix from subject DN
		$subjectDNEntry =~ s/^[0-9]+[:]//;
		# "userCertDN" login
		$entries{"\"" . $subjectDNEntry . "\" " . $$entry[1] . "\n"} = 1;
	}
	
	open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
	foreach my $entry (keys %entries) {
		print FILE $entry;
	}
	close (FILE);
}

perunServicesInit::finalize;
