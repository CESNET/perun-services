#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;
use JSON::XS;

our $SERVICE_NAME = "metacloud_export";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

#forward declaration
sub processGroupData;
sub processMembersData;
sub processResourceData;

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedDataWithGroups;

#Constants
our $A_USER_MAIL;                  *A_USER_MAIL =                 \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_LOGIN;                 *A_USER_LOGIN =                \'urn:perun:user_facility:attribute-def:virt:login';
our $A_USER_SSH_KEY;               *A_USER_SSH_KEY =              \'urn:perun:user:attribute-def:def:sshPublicAdminKey';
our $A_USER_DISPLAY_NAME;          *A_USER_DISPLAY_NAME =         \'urn:perun:user:attribute-def:core:displayName';
our $A_U_CERT_DNS;                 *A_U_CERT_DNS  =               \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_RESOURCE_UNIX_GROUP_NAME;   *A_RESOURCE_UNIX_GROUP_NAME =  \'urn:perun:resource:attribute-def:virt:unixGroupName';
our $A_M_STATUS;                   *A_M_STATUS =                  \'urn:perun:member:attribute-def:core:status';

my $dataByUser = {};
my %allCerts;

foreach my $resourceId ( $data->getResourceIds() ) {
	my $groupName = $data->getResourceAttributeValue( resource => $resourceId, attrName => $A_RESOURCE_UNIX_GROUP_NAME );
	my @memberIds = $data->getMemberIdsForResource( resource => $resourceId );

	for my $memberId (@memberIds) {
		processMembersData $memberId, $groupName, 1;
	}
}

my @memberIds = $data->getMemberIdsForFacility();
for my $memberId (@memberIds) {
	processMembersData $memberId;
}

my @outStruc = values %$dataByUser;

#convert groups from hash to array. Sort by priority (groups from resource are prioretized before group from perun groups)
$_->{"groups"} = [ sort { $_->{"groups"}->{$b} <=> $_->{"groups"}->{$a}} keys %{$_->{"groups"}} ] foreach @outStruc;

my $fileName = "$DIRECTORY/$SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
print FILE JSON::XS->new->utf8->pretty->canonical->encode(\@outStruc);
close FILE;

perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################

# input: (members serviceAttributes, groupName)
# stores memers logins into $groupStruc structure
sub processMembersData {
	my ($memberId, $groupName, $fromResource) = @_;

	if($data->getMemberAttributeValue( member => $memberId, attrName => $A_M_STATUS ) ne 'VALID' ) {
		exit processMembersData();
	}

	my $login = $data->getUserFacilityAttributeValue( member => $memberId, attrName => $A_USER_LOGIN );

	unless(exists $dataByUser->{$login}) {
		my $certDNS = $data->getUserAttributeValue( member => $memberId, attrName => $A_U_CERT_DNS );
		my @certs =  (keys %{$certDNS}, '/C=CZ/O=CESNET/CN=' . $login . '@meta.cesnet.cz');

		#check for certificates duplicities between all users
		my %allUsersCerts = ();

		my @certsDNsWithoutPrefixes;
		for my $cert (@certs) {
			my $certDNWithoutPrefix = $cert;
			$certDNWithoutPrefix =~ s/^[0-9]+[:]//;
			push @certsDNsWithoutPrefixes, $certDNWithoutPrefix;
			if($allUsersCerts{$certDNWithoutPrefix} && $allUsersCerts{$certDNWithoutPrefix} ne $login) { die "Duplicate certificate found $cert for logins: $login and $allUsersCerts{$certDNWithoutPrefix}" ; }
			else { $allUsersCerts{$certDNWithoutPrefix} = $login; }
		}

		$dataByUser->{$login}->{"login"} = $login;
		$dataByUser->{$login}->{"krb_principals"} = [ $login . '@META' ];
		$dataByUser->{$login}->{"cert_dns"} = \@certsDNsWithoutPrefixes;
		$dataByUser->{$login}->{"ssh_keys"} = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_SSH_KEY ) || [];
		$dataByUser->{$login}->{"mail"} = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_MAIL );
		$dataByUser->{$login}->{"full_name"} = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_DISPLAY_NAME );
	}

	if($groupName) {
		$dataByUser->{$login}->{"groups"}->{$groupName} = $fromResource ? 2 : 1;
	}
}
