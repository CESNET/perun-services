#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;
use open qw/:std :utf8/;
use JSON;
use utf8;

local $::SERVICE_NAME = "o365_life_cycle_manager_mu";
local $::PROTOCOL_VERSION = "1.0.0";
my $SCRIPT_VERSION = "1.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#forward declaration
sub processUsers;

#Headers
my $idHeader = "id";
my $memberIdHeader = "memberId";
my $loginHeader = "login";
my $o365EmailAddressesHeader = "o365EmailAddresses";
my $emailAddressesHeader = "emailAddresses";
my $o365AccountExtensionHeader = "o365AccountExtension";
my $allumniAccountDisabledHeader = "allumniAccountDisabled";
my $relationsTypesHeader = "relationTypes";

#Constants

our $A_MEMBER_ID;                  *A_MEMBER_ID =                   \'urn:perun:member:attribute-def:core:id';
our $A_USER_ID;                    *A_USER_ID =                     \'urn:perun:user:attribute-def:core:id';
our $A_USER_LOGIN_MU;              *A_USER_LOGIN_MU =               \'urn:perun:user:attribute-def:def:login-namespace:mu';
our $A_RESOURCE_RELATION_TYPE;     *A_RESOURCE_RELATION_TYPE =      \'urn:perun:resource:attribute-def:def:relationType';
our $A_MEMBER_O365_EMAIL_ADDRS_MU; *A_MEMBER_O365_EMAIL_ADDRS_MU =  \'urn:perun:member:attribute-def:def:o365EmailAddresses:mu';
our $A_USER_FACILITY_O365_ACC_EXT; *A_USER_FACILITY_O365_ACC_EXT =  \'urn:perun:user_facility:attribute-def:def:o365AccountExtension';
our $A_USER_FACILITY_ACC_DISABLED; *A_USER_FACILITY_ACC_DISABLED =  \'urn:perun:user_facility:attribute-def:def:allumniAccountDisabled';

my $userStruc = {};

my $file = $DIRECTORY . "/data.json";

foreach my $resourceData ($data->getChildElements) {
	my %resourceAttributes = attributesToHash $resourceData->getAttributes;
	my $relationType = $resourceAttributes{$A_RESOURCE_RELATION_TYPE};

	foreach my $memberData ($resourceData->getChildElements) {
		processUsers $relationType, $memberData;	
	}
}

# PREPARE USERSDATA TO JSON
my @users;
foreach my $id (sort keys %$userStruc) {
	my $user = {};
	$user->{$idHeader} = $id * 1;
	$user->{$memberIdHeader} = $userStruc->{$id}->{$memberIdHeader};
	$user->{$loginHeader} = $userStruc->{$id}->{$loginHeader};
	$user->{$o365EmailAddressesHeader} = $userStruc->{$id}->{$o365EmailAddressesHeader};
	$user->{$emailAddressesHeader} = $userStruc->{$id}->{$emailAddressesHeader};
	$user->{$o365AccountExtensionHeader} = $userStruc->{$id}->{$o365AccountExtensionHeader};
	$user->{$relationsTypesHeader} = $userStruc->{$id}->{$relationsTypesHeader};
	$user->{$allumniAccountDisabledHeader} = $userStruc->{$id}->{$allumniAccountDisabledHeader};

	push @users, $user;
}
my %usersFinal = ();
$usersFinal{'users'} = \@users;

# PRINT USERS TO JSON
open FILE_USERS,">$file" or die "Cannot open $file: $! \n";
binmode(FILE_USERS);
print FILE_USERS JSON::XS->new->utf8->pretty->encode(\%usersFinal);
close (FILE_USERS) or die "Cannot close $file: $! \n";

perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################
## creates structure for users.json
sub processUsers {
	my ($relationType, $memberData) = @_;

	my %memberAttributes = attributesToHash $memberData->getAttributes;
	my $id = $memberAttributes{$A_USER_ID};

	if (exists $userStruc->{$id}) {
		if($relationType) {
			my @relations = uniqList ($relationType, @{$userStruc->{$id}->{$relationsTypesHeader}});
			$userStruc->{$id}->{$relationsTypesHeader} = \@relations;
		}
	} else {
		my $memberId = $memberAttributes{$A_MEMBER_ID};
		my $login = $memberAttributes{$A_USER_LOGIN_MU};
		my $o365EmailAddresses = $memberAttributes{$A_MEMBER_O365_EMAIL_ADDRS_MU};
		my $o365AccExtension = $memberAttributes{$A_USER_FACILITY_O365_ACC_EXT};
		my $accountDisabled = $memberAttributes{$A_USER_FACILITY_ACC_DISABLED};

		$userStruc->{$id}->{$memberIdHeader} = $memberId;
		$userStruc->{$id}->{$loginHeader} = $login;
		$userStruc->{$id}->{$o365EmailAddressesHeader} = $o365EmailAddresses;
		$userStruc->{$id}->{$o365AccountExtensionHeader} = $o365AccExtension;
		$userStruc->{$id}->{$allumniAccountDisabledHeader} = $accountDisabled ? JSON::true : JSON::false;
		
		#TODO: this is just temporary settings and will be replaced soon 
		my @emailAddresses = @$o365EmailAddresses;
		push @emailAddresses, $login . '@test.cz';
		$userStruc->{$id}->{$emailAddressesHeader} = \@emailAddresses;

		#relations
		my @relations = ();
		if($relationType) {
			push @relations, $relationType;
		}
		$userStruc->{$id}->{$relationsTypesHeader} = \@relations;
	}
}
