#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;
use Perun::GroupsAgent;
use Data::Dumper;
use open qw/:std :utf8/;
use JSON::XS;
use utf8;

local $::SERVICE_NAME = "pakiti";
local $::PROTOCOL_VERSION = "1.0.0";
my $SCRIPT_VERSION = "1.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#forward declaration
sub processUser;
sub shellEscape($);

#Constants
our $A_USER_ID;                   *A_USER_ID =                  \'urn:perun:user:attribute-def:core:id';
our $A_USER_EMAIL;                *A_USER_EMAIL =               \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_NAME;                 *A_USER_NAME =                \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_EPPNS;                *A_USER_EPPNS =               \'urn:perun:user:attribute-def:virt:eduPersonPrincipalNames';
our $A_USER_STATUS;               *A_USER_STATUS =              \'urn:perun:member:attribute-def:core:status';
our $A_MEMBER_IS_SUSPENDED;       *A_MEMBER_IS_SUSPENDED =      \'urn:perun:member:attribute-def:virt:isSuspended';
our $A_RESOURCE_NAME;             *A_RESOURCE_NAME =            \'urn:perun:resource:attribute-def:core:name';
our $A_RESOURCE_PAKITI_ADM;       *A_RESOURCE_PAKITI_ADM =      \'urn:perun:resource:attribute-def:def:isPakitiAdministrator';
our $A_RESOURCE_PAKITI_INSTANCE;  *A_RESOURCE_PAKITI_INSTANCE = \'urn:perun:resource:attribute-def:def:pakitiInstance';

our $STATUS_VALID;                *STATUS_VALID =            \'VALID';
our $STATUS_EXPIRED;              *STATUS_EXPIRED =          \'EXPIRED';
our $STATUS_SUSPENDED;            *STATUS_SUSPENDED =        \'SUSPENDED';

our $HEADER_DISPLAY_NAME = "displayName";
our $HEADER_EMAIL = "mail";
our $HEADER_EPPNS = "eppns";
our $HEADER_IS_PAKITI_ADMIN = "isPakitiAdmin";
our $HEADER_STATUS = "status";

my $agent = perunServicesInit->getAgent;

my $userStruc = {};

#create empty directory for data
my $directoryName = "$DIRECTORY/data/";
mkdir $directoryName or die "Cannot create $directoryName";

my @resourcesData = $data->getChildElements; 
foreach my $resourceData (@resourcesData) {
	my %resourceAttributes= attributesToHash $resourceData->getAttributes;

	my $isPakitiAdmin = $resourceAttributes{$A_RESOURCE_PAKITI_ADM};
	my $pakitiInstance = $resourceAttributes{$A_RESOURCE_PAKITI_INSTANCE};
	#non-empty value should be restricted by module of pakiti instance attribute
	unless($pakitiInstance) {
		my $resourceName = $resourceAttributes{$A_RESOURCE_NAME};
		die "Missing Pakiti instance for resource $resourceName. Pakiti instance is mandatory parameter for every resource with Pakiti service!";
	} else {
		#create record for files with empty members data in JSON (empty array of members)
		$userStruc->{$pakitiInstance} = undef;
	}

	foreach my $memberData ($resourceData->getChildElements) {
		processUser $memberData, $isPakitiAdmin, $pakitiInstance;
	}
}

# PREPARE DATA TO JSON
foreach my $pakitiInstance (sort keys %$userStruc) {
	my @users;
	foreach my $uid (sort keys %{$userStruc->{$pakitiInstance}}) {
		my $user = {};
		$user->{$HEADER_EMAIL} = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_EMAIL};
		$user->{$HEADER_DISPLAY_NAME} = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_DISPLAY_NAME};
		$user->{$HEADER_EPPNS} = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_EPPNS};
		$user->{$HEADER_STATUS} = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS};
		if($userStruc->{$pakitiInstance}->{$uid}->{$HEADER_IS_PAKITI_ADMIN}) {
			$user->{$HEADER_IS_PAKITI_ADMIN} = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_IS_PAKITI_ADMIN};
		}
		push @users, $user;
	}
	# PRINT CONTENT TO JSON
	my $fileName = $directoryName . $pakitiInstance;
	open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
	binmode(FILE);
	print FILE JSON::XS->new->utf8->pretty->encode(\@users);
	close (FILE) or die "Cannot close $fileName: $! \n";
}

perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################
## creates structure for users.scim file
sub processUser {
	my ($memberData, $isPakitiAdmin, $pakitiInstance) = @_;

	my %memberAttributes = attributesToHash $memberData->getAttributes;

	my $uid = $memberAttributes{$A_USER_ID};
	my $email = $memberAttributes{$A_USER_EMAIL};
	my $displayName = $memberAttributes{$A_USER_NAME};
	my $eppns = $memberAttributes{$A_USER_EPPNS};
	my $status = $memberAttributes{$A_USER_STATUS};
	if($memberAttributes{$A_MEMBER_IS_SUSPENDED}) { $status = STATUS_SUSPENDED; }

	if(!$userStruc->{$pakitiInstance}->{$uid}) {
		$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_EMAIL} = $email;
		$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_DISPLAY_NAME} = $displayName;
		$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_EPPNS} = $eppns;
		$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS} = $status;
	} else {
		my $actualStatus = $userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS};
		if ($actualStatus eq $STATUS_EXPIRED && $status eq $STATUS_VALID){
			# change from EXPIRED to VALID
			$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS} = $status;
		} elsif ($actualStatus eq $STATUS_SUSPENDED && $status eq $STATUS_VALID){
			# change from SUSPENDED to VALID
			$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS} = $status;
		} elsif ($actualStatus eq $STATUS_SUSPENDED && $status eq $STATUS_EXPIRED){
			# change from SUSPENDED to EXPIRED
			$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_STATUS} = $status;
		}	
	}

	#always add pakiti admin info if it is set to true
	if($isPakitiAdmin) {
		$userStruc->{$pakitiInstance}->{$uid}->{$HEADER_IS_PAKITI_ADMIN} = JSON::XS::true;
	}
}
