#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use XML::Simple;

local $::SERVICE_NAME = "voms_dirac";
local $::PROTOCOL_VERSION = "3.1.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getDataWithGroups;

#Constants
our $A_R_VO_SHORT_NAME; *A_R_VO_SHORT_NAME =   \'urn:perun:resource:attribute-def:virt:voShortName';
our $A_USER_MAIL;       *A_USER_MAIL =         \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_CERT_DNS;   *A_USER_CERT_DNS =     \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_USER_STATUS;     *A_USER_STATUS =       \'urn:perun:member:attribute-def:core:status';
our $A_R_VOMS_ROLES;    *A_R_VOMS_ROLES =      \'urn:perun:resource:attribute-def:def:vomsRoles';
our $A_G_VOMS_GR_NAME;  *A_G_VOMS_GR_NAME =    \'urn:perun:group:attribute-def:def:vomsGroupName';
our $A_G_VOMS_ROLES;    *A_G_VOMS_ROLES =      \'urn:perun:group:attribute-def:def:vomsRoles';
our $A_USER_NICKNAME;   *A_USER_NICKNAME =     \'urn:perun:user:attribute-def:virt:vomsDiracNickname';
our $STATUS_VALID;      *STATUS_VALID =        \'VALID';

my $struc = {};

#resource one by one
foreach my $resourceData ($data->getChildElements) {
	my %resourceAttrs = attributesToHash $resourceData->getAttributes;
	#information about VO itself (shortname and roles for every user in vo from this resource)
	my $voShortName = $resourceAttrs{$A_R_VO_SHORT_NAME};
	#create info about existing vo (even if it is empty)
	if(!defined($struc->{$voShortName})) { $struc->{$voShortName}->{'name'} = $voShortName; }
	
	my @rolesInVoForResource = ();
	if(defined($resourceAttrs{$A_R_VOMS_ROLES})) { @rolesInVoForResource = @{$resourceAttrs{$A_R_VOMS_ROLES}} };
	
	#groups of resource one by one
	foreach my $groupData (($resourceData->getChildElements)[0]->getChildElements) {
		my %groupAttributes = attributesToHash $groupData->getAttributes;
		#get vomsGroupNameIfExists
		my $vomsGroupName = $groupAttributes{$A_G_VOMS_GR_NAME};
		my @rolesInVoForGroup = ();
		if(defined($groupAttributes{$A_G_VOMS_ROLES})) { @rolesInVoForGroup = @{$groupAttributes{$A_G_VOMS_ROLES}}; }

		#group members one by one
		foreach my $memberData (($groupData->getChildElements)[1]->getChildElements) {
			my %memberAttributes = attributesToHash $memberData->getAttributes;
			#skip member if his status is not valid
			next unless $memberAttributes{$A_USER_STATUS} eq $STATUS_VALID;
			#get mail
			my $email = $memberAttributes{$A_USER_MAIL};

			#each DN of user is separate instance of user in voms
			#skip users with no certificates
			foreach my $subjectDN (keys %{$memberAttributes{$A_USER_CERT_DNS}}) {
				chomp $memberAttributes{$A_USER_CERT_DNS}{$subjectDN};
				my $subjectDNWithoutPrefix = $subjectDN;
				$subjectDNWithoutPrefix =~ s/^[0-9]+[:]//;
				my $CADN = $memberAttributes{$A_USER_CERT_DNS}{$subjectDN};
				#unique user is defined by "'subjectDN'\t'DNofCA'"
				my $uniqueVomsUser = $subjectDNWithoutPrefix . $CADN;
				#create new member if not exists in VO yet
				if(!defined($struc->{$voShortName}->{'users'}->{$uniqueVomsUser})) {
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'email'} = $email;
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'CA'} = $CADN;
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'DN'} = $subjectDNWithoutPrefix;
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'roles'} = {};	
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'groups'} = {};
					if($voShortName eq 'auger' && defined($memberAttributes{$A_USER_NICKNAME})) {
						$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'nickname'} = $memberAttributes{$A_USER_NICKNAME};
					}
				}
				
				#fill vo roles
				foreach my $role (@rolesInVoForResource) {
					$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'roles'}->{$role} = 1;
				}

				#set it just for filled vomsGroupName (it can be null)
				if(defined($vomsGroupName)) {
					#fill groups
					if(!defined($struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'groups'}->{$vomsGroupName})) {
						$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'groups'}->{$vomsGroupName}->{'name'} = $vomsGroupName;
						$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'groups'}->{$vomsGroupName}->{'roles'} = {};
					}


					#fill group roles
					foreach my $role (@rolesInVoForGroup) {
						$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'groups'}->{$vomsGroupName}->{'roles'}->{$role} = 1;
					}
				# if name is not filled set all these roles for vo instead of group
				} else {
					#fill vo roles defined by group without name
					foreach my $role (@rolesInVoForGroup) {
						$struc->{$voShortName}->{'users'}->{$uniqueVomsUser}->{'roles'}->{$role} = 1;
					}
				}
			}
		}
	}
}


for my $vo (keys %$struc) {

	for my $user ( values %{$struc->{$vo}->{'users'}} ) {
		for my $group ( values %{$user->{'groups'}} ) {
			$group->{'roles'} = {'role' => [ keys %{$group->{'roles'}} ] };
		}
		$user->{'roles'} = {'role' => [ keys %{$user->{'roles'}} ] };

		$user->{'groups'} = { 'group' => [ values %{$user->{'groups'}} ] };
	}

	my $tmp = $struc->{$vo}->{'users'};
	$struc->{$vo}->{'users'} = {'user' => [ values %$tmp ] };
}

$struc = {'vo' => [ values %$struc ] };


my $fileName = "$DIRECTORY/voms_dirac";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
binmode FILE, ":utf8";
print FILE XMLout($struc, RootName => 'vos', NoAttr => 1);
close FILE or die "Cannot close $fileName: $! \n";

perunServicesInit::finalize;
