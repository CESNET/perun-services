#!/usr/bin/perl
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use File::Basename;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

our $SERVICE_NAME = basename($0);
our $PROTOCOL_VERSION = "3.1.0";
my $SCRIPT_VERSION = "3.0.2";

sub mergeQuotas {
	my ($sumQuota, $resourceQuota, $memberQuota) = @_;
	{
		no warnings qw(uninitialized);
		if($sumQuota ~~ 0 || $resourceQuota == 0 || $memberQuota ~~ 0) { return 0; } #note operator == at $resourceQuota
	}

	if(!defined $memberQuota) { $memberQuota = 0; }

	return ($sumQuota || 0) + ($memberQuota > $resourceQuota ? $memberQuota : $resourceQuota);
}

sub mergeStatuses {
	my ($finalStatus, $memberStatus) = @_;
	unless(defined $finalStatus) { return $memberStatus; }

	# SUSPENDED state has priority, then it is enough to have at least one member status == VALID
	if ($memberStatus eq "SUSPENDED" || $finalStatus eq "SUSPENDED") {
		return "SUSPENDED";
	} elsif ($memberStatus eq "VALID" || $finalStatus eq "VALID") {
		return "VALID";
	} elsif ($memberStatus eq "EXPIRED" || $finalStatus eq "EXPIRED") {
		return "EXPIRED";
	} elsif ($memberStatus eq "DISABLED" || $finalStatus eq "DISABLED") {
		return "DISABLED";
	}
}

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getDataWithGroups;

#Constants
our $A_USER_OPTIONAL_LOGIN;        *A_USER_OPTIONAL_LOGIN =          \'urn:perun:user:attribute-def:virt:optionalLogin-namespace:mu';
our $A_USER_LOGIN;                 *A_USER_LOGIN =                   \'urn:perun:user_facility:attribute-def:virt:login';
our $A_UF_DATA_QUOTAS;             *A_UF_DATA_QUOTAS =               \'urn:perun:user_facility:attribute-def:virt:dataQuotas';
our $A_UF_FILE_QUOTAS;             *A_UF_FILE_QUOTAS =               \'urn:perun:user_facility:attribute-def:virt:fileQuotas';
our $A_USER_STATUS;                *A_USER_STATUS =                  \'urn:perun:member:attribute-def:core:status';
our $A_HOME_MOUNTPOINT;            *A_HOME_MOUNTPOINT =              \'urn:perun:resource:attribute-def:def:fsHomeMountPoint';
our $A_R_VOLUME;                   *A_R_VOLUME =                     \'urn:perun:resource:attribute-def:def:fsVolume';
our $A_GID;                        *A_GID =                          \'urn:perun:resource:attribute-def:virt:unixGID';
our $A_UID;                        *A_UID =                          \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_F_UMASK;                    *A_F_UMASK =                      \'urn:perun:facility:attribute-def:def:homeDirUmask';
our $A_F_QUOTAENABLED;             *A_F_QUOTAENABLED =               \'urn:perun:facility:attribute-def:def:quotaEnabled';
our $A_GROUP_UNIX_GROUP_NAME;      *A_GROUP_UNIX_GROUP_NAME =        \'urn:perun:group_resource:attribute-def:virt:unixGroupName';
our $A_GROUP_GROUP_NAME;           *A_GROUP_GROUP_NAME =             \'urn:perun:group:attribute-def:core:name';
our $A_R_VO_NAME;                  *A_R_VO_NAME =                    \'urn:perun:resource:attribute-def:virt:voShortName';

our $STRUC_GROUPS;   *STRUC_GROUPS =  \"groups";

#headers
my $DATA_QUOTA_HEADER = "dataQuota";
my $DATA_LIMIT_HEADER = "dataLimit";
my $FILE_QUOTA_HEADER = "fileQuota";
my $FILE_LIMIT_HEADER = "fileLimit";

my $service_file_name = "$DIRECTORY/$::SERVICE_NAME";
my $quotas_file_name = "$DIRECTORY/quotas";
my $umask_file_name = "$DIRECTORY/umask";
my $quota_enabled_file_name = "$DIRECTORY/quota_enabled";

my %facilityAttributes = attributesToHash $data->getAttributes;
my @resourcesData = $data->getChildElements;

#----------------------------------------------------------
# HOME DATA
#----------------------------------------------------------

#structured data about user's home directories
my $dataForUserHomeByLogin = {};

open SERVICE_FILE,">$service_file_name" or die "Cannot open $service_file_name: $! \n";

#prepare home data
foreach my $rData (@resourcesData) {
	my %resourceAttributes = attributesToHash $rData->getAttributes;

	my $volume = $resourceAttributes{$A_R_VOLUME} || $resourceAttributes{$A_HOME_MOUNTPOINT};

	my @membersData = ($rData->getChildElements)[1]->getChildElements;

	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;
		my $login = $memberAttributes{$A_USER_LOGIN};

		unless(defined $dataForUserHomeByLogin->{$login}->{$volume}) { $dataForUserHomeByLogin->{$login}->{$volume} = {}; }
		my $alreadyStoredMemberAttrByMount = $dataForUserHomeByLogin->{$login}->{$volume};

		$alreadyStoredMemberAttrByMount->{$A_R_VOLUME} = $volume;
		$alreadyStoredMemberAttrByMount->{$A_USER_LOGIN} = $login;
		$alreadyStoredMemberAttrByMount->{$A_USER_OPTIONAL_LOGIN} = $memberAttributes{$A_USER_OPTIONAL_LOGIN};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_GID} = $resourceAttributes{$A_GID};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_UID} = $memberAttributes{$A_UID};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_USER_STATUS} = mergeStatuses $memberAttributes{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_USER_STATUS}, $memberAttributes{$A_USER_STATUS};
	}

	foreach my $groupData (($rData->getChildElements)[0]->getChildElements) {
		my $membersElement = ($groupData->getChildElements)[1];
		my %groupAttributes = attributesToHash $groupData->getAttributes;

		my $groupName = $groupAttributes{$A_GROUP_GROUP_NAME};
		my $groupNameWithVo = $resourceAttributes{$A_R_VO_NAME} . ":" . $groupName;
		my $unixGroupName = $groupAttributes{$A_GROUP_UNIX_GROUP_NAME};

		foreach my $mData ($membersElement->getChildElements) {
			my %memberAttributes = attributesToHash $mData->getAttributes;
			my $login = $memberAttributes{$A_USER_LOGIN};
			$dataForUserHomeByLogin->{$login}->{$volume}->{$STRUC_GROUPS}->{$groupNameWithVo} = $unixGroupName;
		}
	}
}

foreach my $login (sort keys %$dataForUserHomeByLogin) {
	my $userAttributesByMount = $dataForUserHomeByLogin->{$login};

	for my $userAttributes (values %$userAttributesByMount) {

		for my $mountPoint (sort keys %{$userAttributes->{$A_HOME_MOUNTPOINT}}) {
			print SERVICE_FILE $mountPoint . "\t";
			print SERVICE_FILE $login . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_UID} . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_GID} . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_USER_STATUS} . "\t";

			print SERVICE_FILE join ',', map { $_ . ">" . ($userAttributes->{$STRUC_GROUPS}->{$_} || "") } sort keys %{$userAttributes->{$STRUC_GROUPS}};
			if(defined($userAttributes->{$A_USER_OPTIONAL_LOGIN})) {
				print SERVICE_FILE "\t" . $userAttributes->{$A_USER_OPTIONAL_LOGIN};
			}
			print SERVICE_FILE "\n";

		}
	}
}

close(SERVICE_FILE);

#----------------------------------------------------------
# QUOTAS DATA
#----------------------------------------------------------

#structured data about quotas
my $dataForUserQuotasByUID = {};

open QUOTAS_FILE,">$quotas_file_name" or die "Cannot open $quotas_file_name: $! \n";

#prepare quotas data
foreach my $rData (@resourcesData) {
	my %resourceAttributes = attributesToHash $rData->getAttributes;
	my @membersData = ($rData->getChildElements)[1]->getChildElements;

	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;
		my $uid = $memberAttributes{$A_UID};

		unless($dataForUserQuotasByUID->{$uid}) {
			#First process data quotas
			foreach my $volume (keys %{$memberAttributes{$A_UF_DATA_QUOTAS}}) {
				my $dataQuota = $memberAttributes{$A_UF_DATA_QUOTAS}{$volume};

				my $softDataQuota = $dataQuota;
				$softDataQuota =~ s/:.*$//;
				my $hardDataQuota = $dataQuota;
				$hardDataQuota =~ s/^.*://;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_QUOTA_HEADER} = quotaToKb $softDataQuota;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_LIMIT_HEADER} = quotaToKb $hardDataQuota;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_QUOTA_HEADER} = 0;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_LIMIT_HEADER} = 0;
			}

			#Then process file quotas
			foreach my $volume (keys %{$memberAttributes{$A_UF_FILE_QUOTAS}}) {
				my $fileQuota = $memberAttributes{$A_UF_FILE_QUOTAS}{$volume};

				my $softFileQuota = $fileQuota;
				$softFileQuota =~ s/:.*$//;
				my $hardFileQuota = $fileQuota;
				$hardFileQuota =~ s/^.*://;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_QUOTA_HEADER} = $softFileQuota;
				$dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_LIMIT_HEADER} = $hardFileQuota;
				unless ($dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_QUOTA_HEADER}) {
					$dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_QUOTA_HEADER} = 0;
				}
				unless ($dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_LIMIT_HEADER}) {
					$dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_LIMIT_HEADER} = 0;
				}
			}
		}
	}
}

foreach my $uid (sort keys %$dataForUserQuotasByUID) {
	foreach my $volume (sort keys %{$dataForUserQuotasByUID->{$uid}}) {
		print QUOTAS_FILE $uid . "\t";
		print QUOTAS_FILE $volume . "\t";
		print QUOTAS_FILE $dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_QUOTA_HEADER} . "\t";
		print QUOTAS_FILE $dataForUserQuotasByUID->{$uid}->{$volume}->{$DATA_LIMIT_HEADER} . "\t";
		print QUOTAS_FILE $dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_QUOTA_HEADER} . "\t";
		print QUOTAS_FILE $dataForUserQuotasByUID->{$uid}->{$volume}->{$FILE_LIMIT_HEADER} . "\n";
	}
}

close(QUOTAS_FILE);
#----------------------------------------------------------
# UMASK DATA
#----------------------------------------------------------

if(defined $facilityAttributes{$A_F_UMASK}) {
	open UMASK_FH, ">$umask_file_name" or die "Cannot open $umask_file_name: $!\n";
	print UMASK_FH $facilityAttributes{$A_F_UMASK}, "\n";
	close UMASK_FH;
}

#----------------------------------------------------------
# QUOTA ENABLED DATA
#----------------------------------------------------------

if(defined $facilityAttributes{$A_F_QUOTAENABLED}) {
	open QUOTA_FH, ">$quota_enabled_file_name" or die "Cannot open $quota_enabled_file_name: $!\n";
	print QUOTA_FH $facilityAttributes{$A_F_QUOTAENABLED}, "\n";
	close QUOTA_FH;
}

#####################################################
perunServicesInit::finalize;
