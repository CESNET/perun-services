#!/usr/bin/perl
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;
use JSON::XS;
use Tie::IxHash;

our $SERVICE_NAME = "du_users_export";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.1.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getDataWithGroups;

my $agent = perunServicesInit->getAgent;
my $vosAgent = $agent->getVosAgent;
my $usersAgent = $agent->getUsersAgent;

#Constants
our $A_USER_MAIL;                *A_USER_MAIL =                \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_LOGIN_EINFRA;        *A_USER_LOGIN_EINFRA =        \'urn:perun:user:attribute-def:def:login-namespace:einfra';
our $A_RESOURCE_NAME;            *A_RESOURCE_NAME =            \'urn:perun:resource:attribute-def:core:name';
our $A_R_VO_NAME;                *A_R_VO_NAME =                \'urn:perun:resource:attribute-def:virt:voShortName';
our $A_F_NAME;                   *A_F_NAME =                   \'urn:perun:facility:attribute-def:core:name';

our $A_USER_FACILITY_UID;        *A_USER_FACILITY_UID =        \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_R_FS_VOLUME;              *A_R_FS_VOLUME =              \'urn:perun:resource:attribute-def:def:fsVolume';
our $A_R_FS_HOME_MOUNT_POINT;    *A_R_FS_HOME_MOUNT_POINT =    \'urn:perun:resource:attribute-def:def:fsHomeMountPoint';

#new attributes for quotas
our $A_MR_DATAQUOTAS;            *A_MR_DATAQUOTAS =            \'urn:perun:member_resource:attribute-def:virt:dataQuotas';
our $A_MR_FILEQUOTAS;            *A_MR_FILEQUOTAS =            \'urn:perun:member_resource:attribute-def:virt:fileQuotas';
our $A_MR_DATA_QUOTAS_OVERRIDE;  *A_MR_DATA_QUOTAS_OVERRIDE =  \'urn:perun:member_resource:attribute-def:def:dataQuotasOverride';
our $A_MR_FILE_QUOTAS_OVERRIDE;  *A_MR_FILE_QUOTAS_OVERRIDE =  \'urn:perun:member_resource:attribute-def:def:fileQuotasOverride';
our $A_R_DEFAULT_DATA_QUOTAS;    *A_R_DEFAULT_DATA_QUOTAS =    \'urn:perun:resource:attribute-def:def:defaultDataQuotas';
our $A_R_DEFAULT_FILE_QUOTAS;    *A_R_DEFAULT_FILE_QUOTAS =    \'urn:perun:resource:attribute-def:def:defaultFileQuotas';
our $A_R_MAX_DATA_QUOTAS;        *A_R_MAX_DATA_QUOTAS =        \'urn:perun:resource:attribute-def:def:maxUserDataQuotas';
our $A_R_MAX_FILE_QUOTAS;        *A_R_MAX_FILE_QUOTAS =        \'urn:perun:resource:attribute-def:def:maxUserFileQuotas';

our $A_U_KERBEROS_LOGINS;        *A_U_KERBEROS_LOGINS =        \'urn:perun:user:attribute-def:virt:kerberosLogins';
our $A_U_SHIBBOLETH_EXT_SOURCES; *A_U_SHIBBOLETH_EXT_SOURCES = \'urn:perun:user:attribute-def:virt:shibbolethExtSources';
our $A_U_ORGANIZATION;           *A_U_ORGANIZATION =           \'urn:perun:user:attribute-def:def:organization';
our $A_U_RESEARCH_GROUP;         *A_U_RESEARCH_GROUP =         \'urn:perun:user:attribute-def:opt:researchGroup';

our $A_RESOURCE_UNIX_GROUP_NAME; *A_RESOURCE_UNIX_GROUP_NAME = \'urn:perun:resource:attribute-def:virt:unixGroupName';
our $A_RESOURCE_UNIX_GID;        *A_RESOURCE_UNIX_GID =        \'urn:perun:resource:attribute-def:virt:unixGID';
our $A_GROUP_UNIX_GROUP_NAME;    *A_GROUP_UNIX_GROUP_NAME =    \'urn:perun:group_resource:attribute-def:virt:unixGroupName';
our $A_GROUP_UNIX_GID;           *A_GROUP_UNIX_GID =           \'urn:perun:group_resource:attribute-def:virt:unixGID';
our $A_GROUP_NAME;               *A_GROUP_NAME =               \'urn:perun:group:attribute-def:core:name';

our $A_RESOURCE_ID;              *A_RESOURCE_ID =              \'urn:perun:resource:attribute-def:core:id';
our $A_RESOURCE_VO_ID;           *A_RESOURCE_VO_ID =           \'urn:perun:resource:attribute-def:core:voId';
our $A_M_STATUS;                 *A_M_STATUS =                 \'urn:perun:member:attribute-def:core:status';
our $A_USER_ID;                  *A_USER_ID =                  \'urn:perun:user:attribute-def:core:id';
our $A_USER_FIRSTNAME;           *A_USER_FIRSTNAME =           \'urn:perun:user:attribute-def:core:firstName';
our $A_USER_LASTNAME;            *A_USER_LASTNAME =            \'urn:perun:user:attribute-def:core:lastName';
our $A_USER_SERVICE_USER;        *A_USER_SERVICE_USER =        \'urn:perun:user:attribute-def:core:serviceUser';

our $A_VO_TOEMAIL;               *A_VO_TOEMAIL =               \'urn:perun:vo:attribute-def:def:toEmail';
our $A_VO_FROMEMAIL;             *A_VO_FROMEMAIL =             \'urn:perun:vo:attribute-def:def:fromEmail';
our $A_VO_NAME;                  *A_VO_NAME =                  \'urn:perun:vo:attribute-def:core:name';

my %attributesByLogin;
my %attributesByVo;

my %facilityAttributes = attributesToHash $data->getAttributes;
my $facilityName = $facilityAttributes{$A_F_NAME};

my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my %resourcesAttributes = attributesToHash $rData->getAttributes;
	my @membersData = ($rData->getChildElements)[1]->getChildElements;
	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;
		unless(defined $attributesByLogin{$memberAttributes{$A_USER_LOGIN_EINFRA}}) {

			#prepare kerberos logins in required format
			my @kerberosLogins = ();
			for my $kerberosLogin (@{$memberAttributes{$A_U_KERBEROS_LOGINS}}) {
				my $realm = $kerberosLogin;
				$realm =~ s/^.*@//;
				push @kerberosLogins, { "src" => $realm, 
																"id"  => $kerberosLogin, 
															};
			}

			#prepare shibboleth logins in required format
			my @shibbolethLogins = ();
			for my $idpIdentifier (keys %{$memberAttributes{$A_U_SHIBBOLETH_EXT_SOURCES}}) {
				#strip prefix from the identifier
				my $idpIdentifierWithoutPrefix = $idpIdentifier;
				$idpIdentifierWithoutPrefix =~ s/^\d+[:]//;
				push @shibbolethLogins, { "src" => $idpIdentifierWithoutPrefix, 
																	"id"  => $memberAttributes{$A_U_SHIBBOLETH_EXT_SOURCES}->{$idpIdentifier},
																};
			}			

			#prepare all associated users (TODO)
			my @associatedUsers = ();
			if($memberAttributes{$A_USER_SERVICE_USER}) {
				my @specificUsers = $usersAgent->getUsersBySpecificUser(specificUser => $memberAttributes{$A_USER_ID});
				my @richAssocUsersWithAttributes = $usersAgent->getRichUsersFromListOfUsersWithAttributes(users => \@specificUsers);
				foreach my $richUser (@richAssocUsersWithAttributes) {
				
					#prepare attributes to hash
					my $assocUserAttrs = {};
					foreach my $attribute (@{$richUser->{'_userAttributes'}}) {
						$assocUserAttrs->{$attribute->{'namespace'} . ':' . $attribute->{'friendlyName'}} = $attribute->{'value'};
					}

					#prepare kerberos logins in required format
					my @assocUserKerberosLogins = ();
					for my $assocUserKerberosLogin (@{$assocUserAttrs->{$A_U_KERBEROS_LOGINS}}) {
						my $realm = $assocUserKerberosLogin;
						$realm =~ s/^.*@//;
						push @assocUserKerberosLogins, { "src" => $realm, 
						                                 "id"  => $assocUserKerberosLogin, 
						                               };
					}

					my @assocUserShibbolethLogins = ();
					for my $idpIdentifier (keys %{$assocUserAttrs->{$A_U_SHIBBOLETH_EXT_SOURCES}}) {
						#strip prefix from the identifier
						my $idpIdentifierWithoutPrefix = $idpIdentifier;
						$idpIdentifierWithoutPrefix =~ s/^\d+[:]//;
						push @assocUserShibbolethLogins, { "src" => $idpIdentifierWithoutPrefix, 
						                                   "id"  => $assocUserAttrs->{$A_U_SHIBBOLETH_EXT_SOURCES}->{$idpIdentifier},
						                                 };
					}

					push @associatedUsers, 
										{
											"PerunUserID" => $richUser->{'_id'},
											"FirstName" => $richUser->{'_firstName'} || "",
											"LastName" => $richUser->{'_lastName'} || "",
											"PreferredMail" => $assocUserAttrs->{$A_USER_MAIL},
											"LoginInEINFRA" => $assocUserAttrs->{$A_USER_LOGIN_EINFRA} ? $assocUserAttrs->{$A_USER_LOGIN_EINFRA}  : "",
											"KerberosPrincipals" => \@assocUserKerberosLogins,
											"ShibbolethPrincipals" => \@assocUserShibbolethLogins,
										};
				}
			}
			#End of associated users structure

			$attributesByLogin{$memberAttributes{$A_USER_LOGIN_EINFRA}} = 
								{
									"LoginInEINFRA"   => $memberAttributes{$A_USER_LOGIN_EINFRA},
									"PreferredMail"   => $memberAttributes{$A_USER_MAIL},
									"IsServiceUser"   => $memberAttributes{$A_USER_SERVICE_USER},
									"AssociatedUsers" => \@associatedUsers,
									"Kerberos"        => \@kerberosLogins,
									"Shibboleth"      => \@shibbolethLogins,
									"PerunUserID"     => $memberAttributes{$A_USER_ID},
									"FirstName"       => $memberAttributes{$A_USER_FIRSTNAME} || "",
									"LastName"        => $memberAttributes{$A_USER_LASTNAME} || "",
									"ResearchGroup"   => defined $memberAttributes{$A_U_RESEARCH_GROUP} ? $memberAttributes{$A_U_RESEARCH_GROUP} : "",
									"Organization"    => defined $memberAttributes{$A_U_ORGANIZATION} ? $memberAttributes{$A_U_ORGANIZATION} : "",
								};

		}

		push @{$attributesByLogin{$memberAttributes{$A_USER_LOGIN_EINFRA}}->{"Resources"}}, 
							{ 
								"Name"               => $resourcesAttributes{$A_RESOURCE_NAME},
								"PerunResourceID"    => $resourcesAttributes{$A_RESOURCE_ID},
								"UID"                => $memberAttributes{$A_USER_FACILITY_UID},
								"Login"              => $memberAttributes{$A_USER_LOGIN_EINFRA},
								"DataQuotas"         => defined $memberAttributes{$A_MR_DATAQUOTAS} ? $memberAttributes{$A_MR_DATAQUOTAS} : {}, 
								"FilesQuotas"        => defined $memberAttributes{$A_MR_FILEQUOTAS} ? $memberAttributes{$A_MR_FILEQUOTAS} : {},
								"DataQuotasOverride" => defined $memberAttributes{$A_MR_DATA_QUOTAS_OVERRIDE} ? $memberAttributes{$A_MR_DATA_QUOTAS_OVERRIDE} : {},
								"FileQuotasOverride" => defined $memberAttributes{$A_MR_FILE_QUOTAS_OVERRIDE} ? $memberAttributes{$A_MR_FILE_QUOTAS_OVERRIDE} : {},
								"Status"             => $memberAttributes{$A_M_STATUS},
							};
	}

	my @unixGroups = ( { "UnixGroupName"  => $resourcesAttributes{$A_RESOURCE_UNIX_GROUP_NAME},
											 "UnixGID"        => $resourcesAttributes{$A_RESOURCE_UNIX_GID},
										 }
									 );

	my @groupsData = ($rData->getChildElements)[0]->getChildElements;
	foreach my $gData (@groupsData) {
		my %groupAttributes = attributesToHash $gData->getAttributes;

		if($groupAttributes{$A_GROUP_UNIX_GROUP_NAME}) {
			push @unixGroups, 
						{ 
							"UnixGroupName" => $groupAttributes{$A_GROUP_UNIX_GROUP_NAME},
							"UnixGID"       => $groupAttributes{$A_GROUP_UNIX_GID},
						};
		}

	unless($attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"Groups"}->{$groupAttributes{$A_GROUP_NAME}}) {
		my @logins;
		foreach my $groupMembersData (($gData->getChildElements)[1]->getChildElements) {
			my %groupMemberAttributes = attributesToHash $groupMembersData->getAttributes;
			push @logins, { "LoginInEINFRA"  => $groupMemberAttributes{$A_USER_LOGIN_EINFRA} };
		}
		$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"Groups"}->{$groupAttributes{$A_GROUP_NAME}}->{"Members"} = \@logins;
	}
	$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"Groups"}->{$groupAttributes{$A_GROUP_NAME}}->{"Resources"}->{$resourcesAttributes{$A_RESOURCE_NAME}} = 1;

	}

	$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"PerunVOID"} = $resourcesAttributes{$A_RESOURCE_VO_ID};
	$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"PerunVOLongName"} = $resourcesAttributes{$A_VO_NAME};
	$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"FromEmail"} = $resourcesAttributes{$A_VO_FROMEMAIL};
	$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"ToEmail"} = $resourcesAttributes{$A_VO_TOEMAIL};

	push @{$attributesByVo{$resourcesAttributes{$A_R_VO_NAME}}->{"Resources"}}, 
					{
						"Name"               => $resourcesAttributes{$A_RESOURCE_NAME},
						"FSHomeMountPoint"   => $resourcesAttributes{$A_R_FS_HOME_MOUNT_POINT},
						"FSVolume"           => $resourcesAttributes{$A_R_FS_VOLUME},
						"PerunResourceID"    => $resourcesAttributes{$A_RESOURCE_ID},
						"MaxUserDataQuotas"  => defined $resourcesAttributes{$A_R_MAX_DATA_QUOTAS} ? $resourcesAttributes{$A_R_MAX_DATA_QUOTAS} : {},
						"MaxUserFileQuotas"  => defined $resourcesAttributes{$A_R_MAX_FILE_QUOTAS} ? $resourcesAttributes{$A_R_MAX_FILE_QUOTAS} : {},
						"DefaultDataQuotas"  => defined $resourcesAttributes{$A_R_DEFAULT_DATA_QUOTAS} ? $resourcesAttributes{$A_R_DEFAULT_DATA_QUOTAS} : {},
						"DefaultFilesQuotas" => defined $resourcesAttributes{$A_R_DEFAULT_FILE_QUOTAS} ? $resourcesAttributes{$A_R_DEFAULT_FILE_QUOTAS} : {},
						"UnixGroups"         => \@unixGroups,
					};
}

my $struc = {};
$struc->{"FileType"} = "du_users_export";
my @users = values %attributesByLogin;
$struc->{"Users"} = \@users;

my $dirName = "$DIRECTORY/data";
mkdir $dirName or die "Cannot create $dirName";

my $fileName = "$DIRECTORY/data/$facilityName-$SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
print FILE JSON::XS->new->utf8->pretty->encode($struc);
close FILE;

for my $vo (keys %attributesByVo) {
	my $voID = $attributesByVo{$vo}->{"PerunVOID"};

	#Prepare VO Admins (TODO)
	my @specificAttributes = ($A_USER_MAIL,
	                          $A_USER_LOGIN_EINFRA,
	                          $A_U_KERBEROS_LOGINS,
	                          $A_U_SHIBBOLETH_EXT_SOURCES);
	my @voAdmins = ();
	my @richAdmins = $vosAgent->getRichAdmins(vo => $voID, role => 'VOADMIN', specificAttributes => \@specificAttributes, allUserAttributes => 0, onlyDirectAdmins => 0,);
	foreach my $richAdmin (@richAdmins) {
			#prepare attributes to hash
			my $adminAttributes = {};
			foreach my $attribute (@{$richAdmin->{'_userAttributes'}}) {
				$adminAttributes->{$attribute->{'namespace'} . ':' . $attribute->{'friendlyName'}} = $attribute->{'value'};
			}

			#prepare kerberos logins in required format
	my @kerberosLogins = ();
	for my $kerberosLogin (@{$adminAttributes->{$A_U_KERBEROS_LOGINS}}) {
		my $realm = $kerberosLogin;
		$realm =~ s/^.*@//;
		push @kerberosLogins, { "src" => $realm, 
	                          "id"  => $kerberosLogin, 
	                        };
	}

	my @shibbolethLogins = ();
	for my $idpIdentifier (keys %{$adminAttributes->{$A_U_SHIBBOLETH_EXT_SOURCES}}) {
		#strip prefix from the identifier
		my $idpIdentifierWithoutPrefix = $idpIdentifier;
		$idpIdentifierWithoutPrefix =~ s/^\d+[:]//;
		push @shibbolethLogins, { "src" => $idpIdentifierWithoutPrefix, 
	                            "id"  => $adminAttributes->{$A_U_SHIBBOLETH_EXT_SOURCES}->{$idpIdentifier},
	                          };
	}

			push @voAdmins, 
					{
						"PerunUserID" => $richAdmin->{'_id'},
						"FirstName" => $richAdmin->{'_firstName'} || "",
						"LastName" => $richAdmin->{'_lastName'} || "",
						"PreferredMail" => $adminAttributes->{$A_USER_MAIL},
						"LoginInEINFRA" => $adminAttributes->{$A_USER_LOGIN_EINFRA} ? $adminAttributes->{$A_USER_LOGIN_EINFRA}  : "",
						"KerberosPrincipals" => \@kerberosLogins,
						"ShibbolethPrincipals" => \@shibbolethLogins,
					};
	}
	#End of structure of VO Admins
	
	my @groups = ();
	for my $groupName (keys %{$attributesByVo{$vo}->{"Groups"}}) {
		push @groups,
			 { 
				 "Name"      => $groupName,
				 "Members"   => $attributesByVo{$vo}->{"Groups"}->{$groupName}->{"Members"},
				 #"Resources" => \@resources,
				 "Resources" => [ keys %{$attributesByVo{$vo}->{"Groups"}->{$groupName}->{"Resources"}} ],
			 }
	}

	my $voStruc = {};
	$voStruc->{"FileType"} = "du_vo_export";
	$voStruc->{"Name"} = $vo;
	$voStruc->{"LongName"} = $attributesByVo{$vo}->{"PerunVOLongName"};
	$voStruc->{"FromEmail"} = $attributesByVo{$vo}->{"FromEmail"};
	$voStruc->{"ToEmail"} = $attributesByVo{$vo}->{"ToEmail"};
	$voStruc->{"Facility"} = $facilityName;
	$voStruc->{"PerunVOID"} = $attributesByVo{$vo}->{"PerunVOID"};
	$voStruc->{"Resources"} = $attributesByVo{$vo}->{"Resources"};
	$voStruc->{"Groups"} = \@groups;
	$voStruc->{"Managers"} = \@voAdmins;

	my $fileName = "$DIRECTORY/data/$facilityName-$vo";
	open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
	print FILE JSON::XS->new->utf8->pretty->encode($voStruc);
	close FILE;
}

perunServicesInit::finalize;
