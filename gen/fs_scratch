#!/usr/bin/perl
 
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use File::Basename;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

our $SERVICE_NAME = basename($0);
our $PROTOCOL_VERSION = "3.5.0";
our $SCRIPT_VERSION = "3.0.1";

sub mergeStatuses {
	my ($finalStatus, $memberStatus) = @_;
	unless(defined $finalStatus) { return $memberStatus; }

	# SUSPENDED state has priority, then it is enough to have at least one member status == VALID
	if ($memberStatus eq "SUSPENDED" || $finalStatus eq "SUSPENDED") { 
		return "SUSPENDED";
	} elsif ($memberStatus eq "VALID" || $finalStatus eq "VALID") { 
		return "VALID";
	} elsif ($memberStatus eq "EXPIRED" || $finalStatus eq "EXPIRED") { 
		return "EXPIRED";
	} elsif ($memberStatus eq "DISABLED" || $finalStatus eq "DISABLED") { 
		return "DISABLED";
	} 
}

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_USER_LOGIN;                *A_USER_LOGIN =                \'urn:perun:user_facility:attribute-def:virt:login';
our $A_SCRATCH_MOUNTPOINT;        *A_SCRATCH_MOUNTPOINT =        \'urn:perun:facility:attribute-def:def:fsScratchMountPoint';
our $A_GID;                       *A_GID =                       \'urn:perun:user_facility:attribute-def:virt:defaultUnixGID';
our $A_UID;                       *A_UID =                       \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_USER_STATUS;               *A_USER_STATUS =               \'urn:perun:member:attribute-def:core:status';
our $A_F_SCRATCH_DIR_PERMISSIONS; *A_F_SCRATCH_DIR_PERMISSIONS = \'urn:perun:facility:attribute-def:def:scratchDirPermissions';

my $memberAttributesByLogin= {};

my $service_file_name = "$DIRECTORY/$::SERVICE_NAME";
my $permissionsFileName = "$DIRECTORY/umask";

my %facilityAttributes = attributesToHash $data->getAttributes;
#####################################
open SERVICE_FILE,">$service_file_name" or die "Cannot open $service_file_name: $! \n";

my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my %resourceAttributes = attributesToHash $rData->getAttributes;
	my @membersData = $rData->getChildElements;
	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;
				
		$memberAttributes{$A_SCRATCH_MOUNTPOINT} = $facilityAttributes{$A_SCRATCH_MOUNTPOINT};
		$memberAttributes{$A_USER_STATUS} = mergeStatuses $memberAttributesByLogin->{$memberAttributes{$A_USER_LOGIN}}->{$A_USER_STATUS}, $memberAttributes{$A_USER_STATUS};

		#store to global structure
		$memberAttributesByLogin->{$memberAttributes{$A_USER_LOGIN}} = \%memberAttributes;
	}
}

for my $userAttributes (values %$memberAttributesByLogin) {
	print SERVICE_FILE $userAttributes->{$A_SCRATCH_MOUNTPOINT} . "\t";
	print SERVICE_FILE $userAttributes->{$A_USER_LOGIN} . "\t";
	print SERVICE_FILE $userAttributes->{$A_UID} . "\t";
	print SERVICE_FILE $userAttributes->{$A_GID} . "\t";
	print SERVICE_FILE $userAttributes->{$A_USER_STATUS} . "\n";
}

close(SERVICE_FILE);

if(defined $facilityAttributes{$A_F_SCRATCH_DIR_PERMISSIONS}) {
	open PERM_FH, ">$permissionsFileName" or die "Cannot open $permissionsFileName: $!\n";
	print PERM_FH $facilityAttributes{$A_F_SCRATCH_DIR_PERMISSIONS}, "\n";
	close PERM_FH;
}
#####################################################
perunServicesInit::finalize;
