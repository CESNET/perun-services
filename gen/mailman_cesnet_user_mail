#!/usr/bin/perl

#######################################
# Generates members of a mailing list #
#######################################

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use POSIX qw/strftime/;

local $::SERVICE_NAME = "mailman_cesnet_user_mail";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedHierarchicalData;

#Constants
our $A_USER_NAME;                            *A_USER_NAME =                             \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_MAIL;                            *A_USER_MAIL =                             \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_LANG;                            *A_USER_LANG =                             \'urn:perun:user:attribute-def:def:preferredLanguage';
our $A_USER_STATUS;                          *A_USER_STATUS =                           \'urn:perun:member:attribute-def:core:status';
our $A_USER_OPT_OUT;                         *A_USER_OPT_OUT =                          \'urn:perun:member_resource:attribute-def:def:optOutMailingList';

our $A_RESOURCE_DISABLE_OPT_OUT;             *A_RESOURCE_DISABLE_OPT_OUT =               \'urn:perun:resource:attribute-def:def:disableMailingListOptOut';
our $A_RESOURCE_MAILING_LIST_NAME;           *A_RESOURCE_MAILING_LIST_NAME =            \'urn:perun:resource:attribute-def:def:mailingListName';
our $A_RESOURCE_MAILING_LIST_VARIANTS;       *A_RESOURCE_MAILING_LIST_VARIANTS =        \'urn:perun:resource:attribute-def:def:mailingListUsesLangVariants'; # true for -cs and -en variants
our $A_RESOURCE_MAILING_LIST_NONVALID_USERS; *A_RESOURCE_MAILING_LIST_NONVALID_USERS =  \'urn:perun:resource:attribute-def:def:mailingListAllowInvalidUsers'; # true to allow users with status other than VALID

my $mailinglistStruc = {};  # $mailinglistStruc->{"mailing list name including lang"}->{"user's e-mail"}->{A_USER_*}

my $mailinglistsDirectory = "$DIRECTORY/mailinglists";
mkdir $mailinglistsDirectory or die "Can't mkdir $mailinglistsDirectory: $!";

#get facilityId from data
my $facilityId = $data->getFacilityId;

foreach my $resourceId ( $data->getResourceIds() ) {
	local *FILE;

	my $listVariantsAttribute = $data->getResourceAttributeValue( resource => $resourceId, attrName => $A_RESOURCE_MAILING_LIST_VARIANTS );
	my $useLangVariants = (defined($listVariantsAttribute) && ($listVariantsAttribute eq "true") );

	my $nonValidUsersAttribute = $data->getResourceAttributeValue( resource => $resourceId, attrName => $A_RESOURCE_MAILING_LIST_NONVALID_USERS );
	my $allowNonvalidUsers = (defined($nonValidUsersAttribute) && ($nonValidUsersAttribute eq "true") );

	my $disableOptOutAttribute = $data->getResourceAttributeValue( resource => $resourceId, attrName => $A_RESOURCE_DISABLE_OPT_OUT );
	my $disableOptOut = (defined($disableOptOutAttribute) && ($disableOptOutAttribute eq "true") );

	my $listNameAttribute = $data->getResourceAttributeValue( resource => $resourceId, attrName => $A_RESOURCE_MAILING_LIST_NAME );
	my $listName = "$listNameAttribute";
	my $listNameEN = $listName . "-en";
	my $listNameCS = $listName . "-cs";

	#create not existing mailing list in structure (even if is empty)
	if($useLangVariants) {
		$mailinglistStruc->{$listNameCS} = {} unless $mailinglistStruc->{$listNameCS};
		$mailinglistStruc->{$listNameEN} = {} unless $mailinglistStruc->{$listNameEN};
	} else {
		$mailinglistStruc->{$listName} = {} unless $mailinglistStruc->{$listName};
	}

	foreach my $memberId ($data->getMemberIdsForResource( resource => $resourceId )) {

		#list only VALID members except if allowNonvalidUsers is true
		my $memberStatus = $data->getMemberAttributeValue( member => $memberId, attrName => $A_USER_STATUS );
		next unless(($memberStatus eq "VALID") || ($allowNonvalidUsers));

		# check if mailing list respect opt-out
		unless ($disableOptOut) {
			# list only members that did not opt out
			my $userOptOutAttribute = $data->getMemberResourceAttributeValue( resource => $resourceId, member => $memberId, attrName => $A_USER_OPT_OUT );
			next if defined $userOptOutAttribute;
		}

		my $listNameWithLang = $listName;
		if($useLangVariants) {
			my $userLangAttribute = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_LANG );
			if(defined($userLangAttribute) && $userLangAttribute eq "cs") {
				$listNameWithLang = $listNameCS;
			} else {
				$listNameWithLang = $listNameEN;
			}
		}

		my $userMailAttribute = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_MAIL );
		my $userNameAttribute = $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_NAME );
		$mailinglistStruc->{$listNameWithLang}->{$userMailAttribute}->{$A_USER_NAME} = $userNameAttribute;
	}
}


for my $listName (keys %$mailinglistStruc) {
	my $fileName = "$mailinglistsDirectory/$listName";
	open FILE,">$fileName" or die "Cannot open $fileName: $! \n";

	for my $mail (keys %{$mailinglistStruc->{$listName}}) {
		print FILE "\"", unidecode($mailinglistStruc->{$listName}->{$mail}->{$A_USER_NAME});
		print FILE "\" <", $mail, ">\n";
	}

	close FILE or die $!;
}

perunServicesInit::finalize;
