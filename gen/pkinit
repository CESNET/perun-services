#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;

local $::SERVICE_NAME = "pkinit";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedHierarchicalData;

#Constants
our $A_USER_KERBEROS_LOGINS;     *A_USER_KERBEROS_LOGINS =       \'urn:perun:user:attribute-def:def:kerberosLogins';
our $A_USER_CERT_DNS;   *A_USER_CERT_DNS =     \'urn:perun:user:attribute-def:virt:userCertDNs';

my $fileName = "$DIRECTORY/$::SERVICE_NAME";


# Create structure $realm->{$kerberosLogin, $userCertDN}
my %realms;

# realm
# kerberosLogin:DN uzivatele
foreach my $memberId ($data->getMemberIdsForFacility()) {
	foreach my $kerberosLogin (@{$data->getUserAttributeValue(attrName => $A_USER_KERBEROS_LOGINS, member => $memberId)}) {
		# Name of the realm on the first line
		# Get realm from the kerberosLogins
		my ($login, $realm) = split('@', $kerberosLogin);
		foreach my $subjectDN (keys %{$data->getUserAttributeValue(attrName => $A_USER_CERT_DNS, member => $memberId)}) {
			#remove prefix from subject DN
			my $subjectDNWithoutPrefix = $subjectDN;
			$subjectDNWithoutPrefix =~ s/^[0-9]+[:]//;
			my @entry = ($kerberosLogin, convertNonAsciiToEscapedUtf8Form $subjectDNWithoutPrefix);
			push(@{$realms{$realm}}, \@entry);
		}
	}
}

foreach my $realm (keys %realms) {
	open FILE,">$fileName." . lc($realm) or die "Cannot open $fileName.$realm: $! \n";
	# Name of the realm on the first line
	print FILE $realm . "\n";
	my %uniqueEntriesInRealm = ();
	foreach my $entry (@{$realms{$realm}}) {
		# kerberosPrincipal:userCertDN
		$uniqueEntriesInRealm{$$entry[0] . ":" . $$entry[1] . "\n"} = 1;
	}

	foreach my $entry (keys %uniqueEntriesInRealm) {
		print FILE $entry;
	}
	close (FILE);
}

perunServicesInit::finalize;
