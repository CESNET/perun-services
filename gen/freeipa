#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use JSON::XS;
use Data::Dumper;

#forward declaration
sub processGroupData; 
sub processGroupName;

local $::SERVICE_NAME = "freeipa";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedDataWithGroups;

#Constants
our $A_FIRST_NAME;               *A_FIRST_NAME =                  \'urn:perun:user:attribute-def:core:firstName';
our $A_MIDDLE_NAME;              *A_MIDDLE_NAME =                 \'urn:perun:user:attribute-def:core:middleName';
our $A_LAST_NAME;                *A_LAST_NAME =                   \'urn:perun:user:attribute-def:core:lastName';
our $A_TITLE_BEFORE;             *A_TITLE_BEFORE =                \'urn:perun:user:attribute-def:core:titleBefore';
our $A_TITLE_AFTER;              *A_TITLE_AFTER =                 \'urn:perun:user:attribute-def:core:titleAfter';
our $A_USER_LOGIN;               *A_USER_LOGIN =                  \'urn:perun:user:attribute-def:def:login-namespace:czechglobe';
our $A_USER_EMAIL;               *A_USER_EMAIL =                  \'urn:perun:user:attribute-def:def:preferredMail';
our $A_GROUP_NAME;               *A_GROUP_NAME =                  \'urn:perun:group:attribute-def:core:name';
our $A_G_R_IPA_G_NAME;           *A_G_R_IPA_G_NAME =              \'urn:perun:group_resource:attribute-def:def:freeipaGroupName';

my $outputData = {
						 members => [],
					 };
my $members = {};
my $groupNames = {};

foreach my $resourceId ($data->getResourceIds()) {
	foreach my $groupId ($data->getGroupIdsForResource(resource => $resourceId)) {
		processGroupData $groupId, $resourceId;
		processGroupName $groupId, $groupNames, $resourceId;
	}
}

for my $login (keys %{$members}) {
	my $member = $members->{$login};
	my @groups = keys %{$member->{'groups'}};
	$member->{'groups'} =  \@groups;
	push @{$outputData->{'members'}}, $member;
}

push @{$outputData->{'groups'}}, $groupNames;

my $out_file_name = "$DIRECTORY/$::SERVICE_NAME";

open FILE,">$out_file_name" or die "Cannot open $out_file_name: $! \n";
print FILE JSON::XS->new->utf8->pretty->canonical->encode($outputData);
close (FILE);
perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################

sub processGroupName {
	my $groupId = $_[0];
	my $groupNames = $_[1];
	my $resourceId = $_[2];

	my $ipaGroupName = $data->getGroupResourceAttributeValue(resource => $resourceId, group => $groupId, attrName => $A_G_R_IPA_G_NAME);

	if(!defined($ipaGroupName)) {
		#skip groups without ipa group name attribute set
		print "Skipping: $data->getGroupAttributeValue(group => $groupId, attrName => $A_GROUP_NAME) and all it's subgroups.\n";
		return;
	}

	if(!$groupNames->{$ipaGroupName}) {
		$groupNames->{$ipaGroupName} = {};
	}
}

sub processGroupData {
	my $groupId = shift;
	my $resourceId = shift;

	my $groupName = $data->getGroupResourceAttributeValue(resource => $resourceId, group => $groupId, attrName => $A_G_R_IPA_G_NAME);

	foreach my $memberId ($data->getMemberIdsForResourceAndGroup(resource => $resourceId, group => $groupId)) {
		my $login = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_LOGIN);
		if($members->{$login}) {
			$members->{$login}->{'groups'}->{$groupName} = 1;
		} else {
			my $firstName = $data->getUserAttributeValue(member => $memberId, attrName => $A_FIRST_NAME);
			my $lastName = $data->getUserAttributeValue(member => $memberId, attrName => $A_LAST_NAME);
			my $middleName = $data->getUserAttributeValue(member => $memberId, attrName => $A_MIDDLE_NAME);
			my $titleBefore = $data->getUserAttributeValue(member => $memberId, attrName => $A_TITLE_BEFORE);
			my $titleAfter = $data->getUserAttributeValue(member => $memberId, attrName => $A_TITLE_AFTER);
			my $mail = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_EMAIL);
			my $member = {
			              first_name   => $firstName ? $firstName : '',
			              middle_name  => $middleName ? $middleName : '',
			              last_name    => $lastName ? $lastName : '',
			              title_before => $titleBefore ? $titleBefore : '',
			              title_after  => $titleAfter? $titleAfter: '',
			              user_login   => $login ? $login : '',
			              mail         => $mail ? $mail : '',
			              groups       => { $groupName => 1 }
			};

			$members->{$login} = $member;
		}
	}
}
