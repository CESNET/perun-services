#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use JSON::XS;
use Data::Dumper;

#forward declaration
sub processGroupData; 
sub processGroupName;

local $::SERVICE_NAME = "freeipa";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getDataWithGroups;

#Constants
our $A_FIRST_NAME;               *A_FIRST_NAME =                  \'urn:perun:user:attribute-def:core:firstName';
our $A_MIDDLE_NAME;              *A_MIDDLE_NAME =                 \'urn:perun:user:attribute-def:core:middleName';
our $A_LAST_NAME;                *A_LAST_NAME =                   \'urn:perun:user:attribute-def:core:lastName';
our $A_TITLE_BEFORE;             *A_TITLE_BEFORE =                \'urn:perun:user:attribute-def:core:titleBefore';
our $A_TITLE_AFTER;              *A_TITLE_AFTER =                 \'urn:perun:user:attribute-def:core:titleAfter';
our $A_USER_LOGIN;               *A_USER_LOGIN =                  \'urn:perun:user:attribute-def:def:login-namespace:czechglobe';
our $A_USER_EMAIL;               *A_USER_EMAIL =                  \'urn:perun:user:attribute-def:def:preferredMail';
our $A_GROUP_NAME;               *A_GROUP_NAME =                  \'urn:perun:group:attribute-def:core:name';
our $A_GROUP_IPA_G_NAME;         *A_GROUP_IPA_G_NAME =            \'urn:perun:group_resource:attribute-def:def:freeipaGroupName';

my $outputData = {
						 members => [],
					 };
my $members = {};
my $groupNames = {};

foreach my $resourceData ($data->getChildElements) {
	foreach my $groupData (($resourceData->getChildElements)[0]->getChildElements) {
		processGroupData $groupData;
		processGroupName $groupData, $groupNames;
	}
}

for my $login (keys %{$members}) {
	my $member = $members->{$login};
	my @groups = keys %{$member->{'groups'}};
	$member->{'groups'} =  \@groups;
	push @{$outputData->{'members'}}, $member;
}

push @{$outputData->{'groups'}}, $groupNames;

my $out_file_name = "$DIRECTORY/$::SERVICE_NAME";

open FILE,">$out_file_name" or die "Cannot open $out_file_name: $! \n";
print FILE JSON::XS->new->utf8->pretty->encode($outputData);
close (FILE);
perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################

sub processGroupName {
	my $groupData = $_[0];
	my $groupNames = $_[1];
	
	my %groupAttributes = attributesToHash $groupData->getAttributes;
	my $ipaGroupName = $groupAttributes{$A_GROUP_IPA_G_NAME};

	if(!$groupNames->{$ipaGroupName}) {
		$groupNames->{$ipaGroupName} = {};
	}

	for my $subgroupData (($groupData->getChildElements)[0]->getChildElements) {
		processGroupName $subgroupData, $groupNames->{$ipaGroupName};
	}
}

sub processGroupData {
	my $groupData = shift;
	my $membersElement = ($groupData->getChildElements)[1];
	my %groupAttributes = attributesToHash $groupData->getAttributes;

	my $groupName = $groupAttributes{$A_GROUP_IPA_G_NAME};

	for my $memberData ($membersElement->getChildElements) {
		my %memberAttributes = attributesToHash $memberData->getAttributes;
		
		my $login = $memberAttributes{$A_USER_LOGIN};
		if($members->{$login}) {
			$members->{$login}->{'groups'}->{$groupName} = 1;
		} else {
			my $member = {
			              first_name   => defined($memberAttributes{$A_FIRST_NAME}) ? $memberAttributes{$A_FIRST_NAME} : '',
			              middle_name  => defined($memberAttributes{$A_MIDDLE_NAME}) ? $memberAttributes{$A_MIDDLE_NAME} : '',
			              last_name    => defined($memberAttributes{$A_LAST_NAME}) ? $memberAttributes{$A_LAST_NAME} : '',
			              title_before => defined($memberAttributes{$A_TITLE_BEFORE}) ? $memberAttributes{$A_TITLE_BEFORE} : '',
			              title_after  => defined($memberAttributes{$A_TITLE_AFTER}) ? $memberAttributes{$A_TITLE_AFTER} : '',
                    user_login   => defined($login) ? $login : '',
			              mail         => defined($memberAttributes{$A_USER_EMAIL}) ? $memberAttributes{$A_USER_EMAIL} : '',
			              groups       => { $groupName => 1 }
			};
			$members->{$login} = $member;
		}
	}
}
