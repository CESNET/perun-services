#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use perunServicesInit;

local $::SERVICE_NAME = "ad_safeq6_mu";
local $::PROTOCOL_VERSION = "3.0.1";
my $SCRIPT_VERSION = "3.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $fileName = "$DIRECTORY/$::SERVICE_NAME".".ldif";
my $fileNameGroups = "$DIRECTORY/$::SERVICE_NAME"."_groups.ldif";
my $baseDnFileName = "$DIRECTORY/baseDN";
my $baseDnFileNameGroups = "$DIRECTORY/baseDNGroups";

my $data = perunServicesInit::getHashedDataWithGroups;

#Constants
our $A_F_BASE_DN;  *A_F_BASE_DN = \'urn:perun:facility:attribute-def:def:adBaseDN';
our $A_F_GROUP_BASE_DN;  *A_F_GROUP_BASE_DN = \'urn:perun:facility:attribute-def:def:adGroupBaseDN';

our $A_USER_ID; *A_USER_ID = \'urn:perun:user:attribute-def:core:id';
our $A_LOGIN_NAMESPACE_MU; *A_LOGIN_NAMESPACE_MU = \'urn:perun:user:attribute-def:def:login-namespace:mu';
our $A_USER_FIRST_NAME; *A_USER_FIRST_NAME = \'urn:perun:user:attribute-def:core:firstName';
our $A_USER_LAST_NAME; *A_USER_LAST_NAME = \'urn:perun:user:attribute-def:core:lastName';
our $A_USER_PREFERRED_MAIL; *A_USER_PREFERRED_MAIL = \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_DISPLAY_NAME; *A_USER_DISPLAY_NAME = \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_CHIP_NUMBERS; *A_USER_CHIP_NUMBERS = \'urn:perun:user:attribute-def:def:chipNumbers';
our $A_USER_ADDRESS; *A_USER_ADDRESS = \'urn:perun:user:attribute-def:def:address';

our $G_NAME; *G_NAME = \'urn:perun:group:attribute-def:core:name';

my $baseDNUsers = $data->getFacilityAttributeValue( attrName => $A_F_BASE_DN );
my $baseDNGroups = $data->getFacilityAttributeValue( attrName => $A_F_GROUP_BASE_DN);

# CHECK ON FACILITY ATTRIBUTES
if (!defined $baseDNUsers) {
	print("Attribute $A_F_BASE_DN is not defined for facility\n");
	exit 1;
}
if (!defined $baseDNGroups) {
	print("Attribute $A_F_GROUP_BASE_DN is not defined for facility\n");
	exit 1;
}

open FILE,">:encoding(UTF-8)","$baseDnFileName" or die "Cannot open $baseDnFileName: $! \n";
print FILE $baseDNUsers;
close(FILE);

open FILE,">:encoding(UTF-8)","$baseDnFileNameGroups" or die "Cannot open $baseDnFileNameGroups: $! \n";
print FILE $baseDNGroups;
close(FILE);

# GATHER USERS
my $users;
my $groups;
foreach my $resourceId ($data->getResourceIds()) {
	foreach my $memberId ($data->getMemberIdsForResource(resource => $resourceId)) {
		my $id = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_ID);
		my $login = $data->getUserAttributeValue(member => $memberId, attrName => $A_LOGIN_NAMESPACE_MU);
		unless ($login =~ /^9[0-9]{1,19}$/ or $login =~ /^[0-9]{1,20}$/) {
			# We now always skip non-UÄŒO users !!
			next;
		}
		my $loginString = "CN=".$login."\@muni.cz,".$baseDNUsers;
		$users->{$id}->{"login"} = $loginString;
		$users->{$id}->{$A_LOGIN_NAMESPACE_MU} = $login;
		$users->{$id}->{$A_USER_FIRST_NAME} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_FIRST_NAME);
		$users->{$id}->{$A_USER_LAST_NAME} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_LAST_NAME);
		$users->{$id}->{$A_USER_PREFERRED_MAIL} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_PREFERRED_MAIL);
		$users->{$id}->{$A_USER_DISPLAY_NAME} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_DISPLAY_NAME);
		$users->{$id}->{$A_USER_CHIP_NUMBERS} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_CHIP_NUMBERS);
		$users->{$id}->{$A_USER_ADDRESS} = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_ADDRESS);
	}
	
	foreach my $groupId ($data->getGroupIdsForResource(resource => $resourceId)) {
		$groups->{$groupId}->{"resourceId"} = $resourceId;
		$groups->{$groupId}->{"name"} = $data->getGroupAttributeValue(group=>$groupId, attrName=>$G_NAME);
		my @membersIds = sort $data->getMemberIdsForResourceAndGroup(resource=> $resourceId, group=> $groupId);
		my @userIds;
		foreach my $memberId (@membersIds) {
			my $userId = $data->getUserAttributeValue(member => $memberId, attrName => $A_USER_ID);
			push(@userIds, $userId);
		}
		$groups->{$groupId}->{"members"} = \@userIds;
	}
}

#
# PRINT users to file
#
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
binmode FILE, ":utf8";

my %allChipNumbers;  #used for consistency check - each chip number should belong to only one user
my @logins = sort keys %$users;
for my $loginId (@logins) {

	my $login = $users->{$loginId}->{$A_LOGIN_NAMESPACE_MU} . '@muni.cz';

	# Print non-empty values
	print FILE "dn: $users->{$loginId}->{'login'}\n";
	print FILE "cn: $login\n";
	print FILE "givenName: $users->{$loginId}->{$A_USER_FIRST_NAME}\n" if defined $users->{$loginId}->{$A_USER_FIRST_NAME};
	print FILE "sn: $users->{$loginId}->{$A_USER_LAST_NAME}\n" if defined $users->{$loginId}->{$A_USER_LAST_NAME};
	print FILE "mail: $users->{$loginId}->{$A_USER_PREFERRED_MAIL}\n" if defined $users->{$loginId}->{$A_USER_PREFERRED_MAIL};
	print FILE "displayName: $users->{$loginId}->{$A_USER_DISPLAY_NAME}\n" if defined $users->{$loginId}->{$A_USER_DISPLAY_NAME};
	if (defined $users->{$loginId}->{$A_USER_CHIP_NUMBERS}) {
		foreach my $chipNumber (sort @{$users->{$loginId}->{$A_USER_CHIP_NUMBERS}}) {
			if ($allChipNumbers{$chipNumber}) {
				die "Same chip number shared by more users. Logins of users: " . $login . ", " . $allChipNumbers{$chipNumber} . "\n";
			}
			$allChipNumbers{$chipNumber} = $login;
			print FILE "otherPager: $chipNumber\n";
		}
	}
	print FILE "postalAddress: $users->{$loginId}->{$A_USER_ADDRESS}\n" if defined $users->{$loginId}->{$A_USER_ADDRESS};
	print FILE "objectClass: top\n";
	print FILE "objectClass: person\n";
	print FILE "objectClass: organizationalPerson\n";
	print FILE "objectClass: user\n";
	print FILE "\n";
}
close FILE;

open FILE,">$fileNameGroups" or die "Cannot open $fileNameGroups: $! \n";
binmode FILE, ":utf8";
my @groups = sort keys %$groups;
foreach my $group (@groups) {
	print FILE "dn: CN=" . $groups->{$group}->{name} . "," . $baseDNGroups . "\n";
	print FILE "cn: " . $groups->{$group}->{name} . "\n";
	print FILE "objectClass: groupOfNames\n";
	print FILE "objectClass: top\n";

	my $groupMembers = $groups->{$group}->{"members"};
	foreach my $groupMemberId (sort @$groupMembers) {
		my $userCN = $users->{$groupMemberId}->{login};
		next unless defined $userCN;
		print FILE "member: " . $users->{$groupMemberId}->{login} . "\n";
	}

	# there must be empty line after each entry
	print FILE "\n";
}

close FILE;
perunServicesInit::finalize;
