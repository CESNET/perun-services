#!/usr/bin/perl
#
# Generates members of a mailing list
#
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use JSON::XS;

#forward declaration
sub processGroupData; 
sub processResourceData;
sub processResourceMembersData;
sub processGroupsMembersData;

local $::SERVICE_NAME = "docdb";
local $::PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHashedDataWithGroups;

#Constants
our $A_USER_NAME;                        *A_USER_NAME =                       \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_LOGIN;                       *A_USER_LOGIN =                      \'urn:perun:user_facility:attribute-def:virt:login';
our $A_USER_MAIL;                        *A_USER_MAIL =                       \'urn:perun:user:attribute-def:def:preferredMail';
our $A_GROUP_NAME;                       *A_GROUP_NAME =                      \'urn:perun:group:attribute-def:core:name';
our $A_GROUP_DESCRIPTION;                *A_GROUP_DESCRIPTION =               \'urn:perun:group:attribute-def:core:description';

my $outputData = {
						 groups => [],
						 members => [],
					 };

foreach my $resourceId ($data->getResourceIds()) {
	processResourceMembersData $resourceId;

	foreach my $groupId ($data->getGroupIdsForResource( resource => $resourceId )) {
		processGroupData $resourceId, $groupId;
	}
}



my $out_file_name = "$DIRECTORY/$::SERVICE_NAME";

open FILE,">$out_file_name" or die "Cannot open $out_file_name: $! \n";
print FILE JSON::XS->new->utf8->pretty->canonical->encode($outputData);
close (FILE);
perunServicesInit::finalize;

##############################################################################
#   Only subs definitions down there
##############################################################################

sub processGroupData {
	my ($resourceId, $groupId) = @_;

	my $group = {
								cn          => $data->getGroupAttributeValue( group => $groupId, attrName => $A_GROUP_NAME ),
								description => $data->getGroupAttributeValue( group => $groupId, attrName => $A_GROUP_DESCRIPTION ),
								memberuids  => processGroupsMembersData($resourceId, $groupId),
							};

	push @{$outputData->{'groups'}}, $group;

}

sub processResourceMembersData {
	my $resourceId = shift;
	for my $memberId ($data->getMemberIdsForResource(resource => $resourceId)){

		my $member = {
										mail   => $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_MAIL ),
										uid    => $data->getUserFacilityAttributeValue( member => $memberId, attrName => $A_USER_LOGIN ),
										cn     => unidecode $data->getUserAttributeValue( member => $memberId, attrName => $A_USER_NAME ),
								 };

		push @{$outputData->{'members'}}, $member;
	}
}

sub processGroupsMembersData {
	my ($resourceId, $groupId) = @_;
	my @groupMembers = ();
	foreach my $memberId($data->getMemberIdsForResourceAndGroup( resource => $resourceId, group => $groupId )) {
		push @groupMembers, $data->getUserFacilityAttributeValue( member => $memberId, attrName => $A_USER_LOGIN );
	}
	@groupMembers = sort @groupMembers;
	return \@groupMembers;
}
