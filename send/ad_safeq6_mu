#!/usr/bin/perl

use strict;
use warnings;
use Net::LDAPS;
use Net::LDAP::Entry;
use Net::LDAP::Message;
use Net::LDAP::LDIF;
no warnings 'experimental::smartmatch';

# Import shared AD library
use ADConnector;
use ScriptLock;

# log counters
my $counter_add = {
	'users'  => 0,
	'groups' => 0
};
my $counter_update = {
	'users'  => 0,
	'groups' => 0
};
my $counter_delete = {
	'users'  => 0,
	'groups' => 0
};
my $counter_fail = {
	'users'  => 0,
	'groups' => 0
};

# define service
my $service_name = "ad_safeq6_mu";

# GEN folder location
my $facility_name = $ARGV[0];
chomp($facility_name);
my $service_files_base_dir = "../gen/spool";
my $service_files_dir = "$service_files_base_dir/$facility_name/$service_name";

# BASE DN -> for Users
open my $file, '<', "$service_files_dir/baseDN";
my $base_dn = <$file>;
chomp($base_dn);
close $file;

# BASE DN -> for Groups
open $file, '<', "$service_files_dir/baseDNGroups";
my $base_dn_groups = <$file>;
chomp($base_dn_groups);
close $file;

# propagation destination
my $namespace = $ARGV[1];
chomp($namespace);

# create service lock
my $lock = ScriptLock->new($facility_name . "_" . $service_name . "_" . $namespace);
($lock->lock() == 1) or die "Unable to get lock, service propagation was already running.";

# init configuration
my @conf = init_config($namespace);
my @ldap_locations = resolve_domain_controlers($conf[0]);
my $ldap = ldap_connect_multiple_options(\@ldap_locations);

# connect
ldap_bind($ldap, $conf[1], $conf[2]);

# load all data
my @perun_entries_users = load_perun($service_files_dir . "/" . $service_name . ".ldif");
my @perun_entries_groups = load_perun($service_files_dir . "/" . $service_name . "_groups.ldif");
my @ad_entries_users = load_ad($ldap, $base_dn, '(objectClass=person)', [ 'cn', 'givenName', 'sn', 'mail', 'displayName', 'otherPager', 'memberOf', 'postalAddress' ]);
my @ad_entries_groups = load_ad($ldap, $base_dn_groups, '(objectClass=groupOfNames)', [ 'cn', 'member' ]);

my %ad_entries_map_users = ();
foreach my $ad_entry (@ad_entries_users) {
	my $login = $ad_entry->get_value('cn');
	if ($login =~ /^[0-9]{1,20}\@muni.cz$/) {
		$ad_entries_map_users{$login} = $ad_entry;
	}
}

my %ad_entries_map_groups = ();
foreach my $ad_entry (@ad_entries_groups) {
	my $cn = $ad_entry->get_value('cn');
	$ad_entries_map_groups{$cn} = $ad_entry;
}

# process data
process_add();
process_delete();
process_update();

# disconnect
ldap_unbind($ldap);

# log results
ldap_log($service_name, "Added: " . $counter_add->{users} . " user entries.");
ldap_log($service_name, "Added: " . $counter_add->{groups} . " group entries.");
ldap_log($service_name, "Updated: " . $counter_update->{users} . " user entries.");
ldap_log($service_name, "Updated: " . $counter_update->{groups} . " group entries.");
ldap_log($service_name, "Failed: " . $counter_fail->{users} . " user entries.");
ldap_log($service_name, "Failed: " . $counter_fail->{groups} . " group entries.");

# print results for TaskResults in GUI
print "Added: " . $counter_add->{users} . " user entries.\n";
print "Added: " . $counter_add->{groups} . " group entries.\n";
print "Updated: " . $counter_update->{users} . " user entries.\n";
print "Updated: " . $counter_update->{groups} . " group entries.\n";
print "Failed: " . $counter_fail->{users} . " user entries.\n";
print "Failed: " . $counter_fail->{groups} . " group entries.\n";

$lock->unlock();

if ($counter_fail->{users} > 0 || $counter_fail->{groups} > 0) {
	die "Failed to process.\nSee log at: ~/send/logs/$service_name.log";
}

sub process_add {
	foreach my $perun_entry (@perun_entries_groups) {
		my $cn = $perun_entry->get_value('cn');
		if (exists $ad_entries_map_groups{$cn}) {
			# Group already exists in AD
			next;
		}

		# Add new entry to AD
		my $response = $perun_entry->update($ldap);
		unless ($response->is_error()) {
			# SUCCESS
			ldap_log($service_name, "Added: " . $perun_entry->dn());
			$counter_add->{groups}++;
		}
		else {
			# FAIL
			ldap_log($service_name, "NOT added: " . $perun_entry->dn() . " | " . $response->error());
			ldap_log($service_name, $perun_entry->ldif());
			$counter_fail->{groups}++;
		}
	}

	foreach my $perun_entry (@perun_entries_users) {
		my $login = $perun_entry->get_value('cn');
		unless ($login =~ /^[0-9]{1,20}\@muni.cz$/) {
			# We always skip non-UČO users !!
			next;
		}

		if (exists $ad_entries_map_users{$login}) {
			# User already exists in AD, will update in next step
			next;
		}

		# Add new entry to AD
		my $response = $perun_entry->update($ldap);
		unless ($response->is_error()) {
			# SUCCESS
			ldap_log($service_name, "Added: " . $perun_entry->dn());
			$counter_add->{users}++;
		}
		else {
			# FAIL
			ldap_log($service_name, "NOT added: " . $perun_entry->dn() . " | " . $response->error());
			ldap_log($service_name, $perun_entry->ldif());
			$counter_fail->{users}++;
		}
	}
}

sub process_delete {
	foreach my $ad_entry (@ad_entries_users) {
		my $login = $ad_entry->get_value('cn');
		unless ($login =~ /^[0-9]{1,20}\@muni.cz$/) {
			# We always skip non-UČO users !!
			next;
		}

		my @perun_logins = ();
		for my $perun_entry (@perun_entries_users) {
			push(@perun_logins, $perun_entry->get_value('cn'));
		}

		if ($login ~~ @perun_logins) {
			# User exists in Perun, will be updated in next step
			next;
		}

		$ad_entry->delete;
		my $response = $ad_entry->update($ldap);
		unless ($response->is_error()) {
			# SUCCESS
			ldap_log($service_name, "Deleted: " . $ad_entry->dn());
			$counter_delete->{users}++;
		}
		else {
			# FAIL
			ldap_log($service_name, "NOT deleted: " . $ad_entry->dn() . " | " . $ad_entry->error());
			$counter_fail->{users}++;
		}
	}

	foreach my $ad_entry (@ad_entries_groups) {
		my $cn = $ad_entry->get_value('cn');
		my @perun_cns = ();
		for my $perun_entry (@perun_entries_groups) {
			push(@perun_cns, $perun_entry->get_value('cn'));
		}

		if ($cn ~~ @perun_cns) {
			# Group exists in Perun, will be updated in next step
			next;
		}

		$ad_entry->delete;
		my $response = $ad_entry->update($ldap);
		unless ($response->is_error()) {
			# SUCCESS
			ldap_log($service_name, "Deleted: " . $ad_entry->dn());
			$counter_delete->{groups}++;
		}
		else {
			# FAIL
			ldap_log($service_name, "NOT deleted: " . $ad_entry->dn() . " | " . $ad_entry->error());
			$counter_fail->{groups}++;
		}
	}
}

sub process_update {
	foreach my $perun_entry (@perun_entries_groups) {
		my @per_val = $perun_entry->get_value('member');

		# load members of a group from AD based on DN in Perun => Group must exists in AD
		my @ad_val = load_group_members($ldap, $perun_entry->dn(), '(objectClass=groupOfNames)');

		if ($? != 0) {
			ldap_log($service_name, "Unable to load Perun group members from AD: " . $perun_entry->dn());
			next;
		}

		# sort to compare
		my @sorted_ad_val = sort(@ad_val);
		my @sorted_per_val = sort(@per_val);

		# compare using smart-match (perl 5.10.1+)
		unless(@sorted_ad_val ~~ @sorted_per_val) {
			my $response_ad = $ldap->search( base => $perun_entry->dn(), filter => '(objectClass=groupOfNames)', scope => 'base' );
			unless ($response_ad->is_error()) {
				# SUCCESS
				my $ad_entry = $response_ad->entry(0);
				$ad_entry->replace(
					'member' => \@per_val
				);
				# Update entry in AD
				my $response_update = $ad_entry->update($ldap);

				if ($response_update) {
					unless ($response_update->is_error()) {
						# SUCCESS (group updated)
						$counter_update->{groups}++;
						ldap_log($service_name, "Group members updated: " . $ad_entry->dn() . " | \n" . join(",\n",@sorted_ad_val) .  "\n=>\n" . join(",\n",@sorted_per_val));
					} else {
						# FAIL (to update group)
						$counter_fail->{groups}++;
						ldap_log($service_name, "Group members NOT updated: " . $ad_entry->dn() . " | " . $response_update->error());
						ldap_log($service_name, $ad_entry->ldif());
					}
				}

			} else {
				# FAIL (to get group from AD)
				$counter_fail->{groups}++;
				ldap_log($service_name, "Group members NOT updated: " . $perun_entry->dn() . " | " . $response_ad->error());
			}
		}
	}

	foreach my $perun_entry (@perun_entries_users) {
		my $login = $perun_entry->get_value('cn');
		unless ($ad_entries_map_users{$login}) {
			# User does not exist in AD, should be added in previous step
			next;
		}

		my $ad_entry = $ad_entries_map_users{$login};
		# attrs without cn since it's part of DN to updated
		my @attrs = ('givenName', 'sn', 'mail', 'displayName', 'otherPager', 'postalAddress');
		# stored log messages to check if entry should be updated
		my @entry_changed = ();
		# check each attribute
		foreach my $attr (@attrs) {
			if (compare_entry($ad_entry, $perun_entry, $attr) == 1) {
				# store value for log
				my @ad_val = $ad_entry->get_value($attr);
				my @perun_val = $perun_entry->get_value($attr);
				push(@entry_changed, "$attr | " . join(", ", sort(@ad_val)) . " => " . join(", ", sort(@perun_val)));
				# replace value
				$ad_entry->replace(
					$attr => \@perun_val
				);
			}

			if (@entry_changed) {
				# Update entry in AD
				my $response = $ad_entry->update($ldap);
				unless ($response->is_error()) {
					# SUCCESS
					foreach my $log_message (@entry_changed) {
						ldap_log($service_name, "Updated: " . $ad_entry->dn() . " | " . $log_message);
					}
					$counter_update->{users}++;
				}
				else {
					# FAIL
					ldap_log($service_name, "NOT updated: " . $ad_entry->dn() . " | " . $response->error());
					ldap_log($service_name, $ad_entry->ldif());
					$counter_fail->{users}++;
				}

				# Empty array for next iteration
				@entry_changed = ();
			}
		}
	}
}