#!/usr/bin/env python3
import json
import sys

import requests
import send_lib
import sys_operation_classes

SERVICE_NAME = "checkin"
DEBUG = False

counter_same = 0
counter_added = 0
counter_updated = 0
counter_cleared = 0
counter_failed = 0


def print_debug(message):
    if DEBUG:
        print(message)


def get_access_token():
    print_debug("Retrieving access token...")
    token_post_data = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "client_credentials",
    }
    response = requests.post(token_endpoint, token_post_data)
    if response.ok:
        response_data = response.json()
        global access_token
        access_token = response_data["access_token"]
        print_debug("Successfully retrieved access token.")
    else:
        send_lib.die_with_error(
            f"Could not retrieve access token from {token_endpoint}."
            f" Status code: {response.status_code}"
        )


def retrieve_their_users():
    print_debug("Retrieving users from EGI...")
    response = requests.get(
        entitlements_get_endpoint, headers={"Authorization": "Bearer " + access_token}
    )
    if response.ok:
        data = response.json()
        global their_users
        their_users = {entry["username"]: entry for entry in data["users"]}
        print_debug("Successfully retrieved " + str(data["count"]) + " users.")
    else:
        print_debug(
            f"Failed when retrieving users with error code {response.status_code}."
        )
        send_lib.die_with_error("Communication with entitlements endpoint failed.")


def update_user(user, entitlements):
    body = {"perunEntitlements": entitlements}
    print_debug(f"Updating user {user} with entitlements: {entitlements}.")
    response = requests.post(
        f"{entitlement_update_endpoint}{user}",
        json=body,
        headers={"Authorization": "Bearer " + access_token},
    )
    if response.ok:
        print_debug(f"Successfully updated user {user}")
        return 1
    else:
        global counter_failed
        counter_failed += 1
        print(
            f"Failed to update user {user}. Status code {response.status_code}",
            file=sys.stderr,
        )
        if response.status_code != 404:
            send_lib.die_with_error(
                f"Failed to reach user update endpoint for user {user}."
                f" Status code {response.status_code}."
            )
        return 0


def process_users():
    global counter_same
    global counter_updated
    global counter_cleared
    for user in our_users:
        if user not in their_users:
            if len(our_users[user]) == 0:
                print_debug(
                    f"User {user} has no entitlements and is missing in EGI, no update needed."
                )
                counter_same += 1
                continue
            print_debug(
                f"User {user} not found in EGI, setting entitlements to perun values"
            )
            global counter_added
            counter_added += update_user(user, our_users[user])
        elif set(our_users[user]) == set(
            their_users[user]["attributes"]["perunEntitlements"]
        ):
            # no change in entitlements, no update needed
            print_debug(
                f"User {user} has matching entitlements in EGI and Perun, skipping."
            )
            counter_same += 1
        else:
            # entitlements differ, set to perun entitlements
            print_debug(
                f"User {user} has differing entitlements, updating to Perun values"
            )
            counter_updated += update_user(user, our_users[user])

    remaining_users = their_users.keys() - our_users.keys()
    for user in remaining_users:
        # user not in perun, set entitlements to empty
        print_debug(
            f"User {user} not found in Perun values, setting entitlements to empty list."
        )
        counter_cleared += update_user(user, [])


def print_summary():
    print("Summary:")
    print(f"Users with matching entitlements: {counter_same}")
    print(f"Users updated with previously empty entitlements: {counter_added}")
    print(f"Users updated with previously existing entitlements: {counter_updated}")
    print(f"Users with entitlements set to empty: {counter_cleared}")
    print(f"Users failed to update: {counter_failed}")


if __name__ == "__main__":
    send_lib.check_input_fields(sys.argv, True)
    facility = sys.argv[1]
    destination = sys.argv[2]
    destination_type = sys.argv[3]

    send_lib.check_destination_type_allowed(
        destination_type, send_lib.DESTINATION_TYPE_SERVICE_SPECIFIC
    )

    their_users = dict()
    access_token = None
    # CheckIn API endpoints
    token_endpoint = destination + "/protocol/openid-connect/token"
    entitlements_get_endpoint = destination + "/user-attributes/users/perunEntitlements"
    entitlement_update_endpoint = destination + "/user-attributes/"

    auth_data = send_lib.get_custom_config_properties(
        SERVICE_NAME, destination, ["clientId", "clientSecret"]
    )

    if not auth_data:
        send_lib.die_with_error(
            "Configuration file for the service is either completely missing or properties"
            " 'clientId' and/or 'clientSecret' are missing for the provided destination."
        )

    client_id, client_secret = auth_data

    spool_folder = sys_operation_classes.SysOperation.get_gen_folder(
        facility, SERVICE_NAME
    )
    with open(spool_folder + "/" + SERVICE_NAME + ".json") as gen_file:
        our_users = json.load(gen_file)
        get_access_token()
        retrieve_their_users()
        process_users()
        print_summary()
