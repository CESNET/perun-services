#!/usr/bin/perl
use strict;
use warnings FATAL => 'all';
use DBI;
use DBI qw(:sql_types);
use Getopt::Long qw(:config no_ignore_case);
use Data::Dumper;
use ScriptLock;
binmode STDOUT, ":utf8";

sub appendParam;

my $username;
my $password;
my $table_teacher = 'STAG_2_PERUN.UCITEL';
my $table_student = 'STAG_2_PERUN.STUDENT';

# define service
my $service_name = "vsup_stag";

# GEN folder location
my $facility_name = $ARGV[0];
chomp($facility_name);
my $service_files_base_dir="../gen/spool";
my $service_files_dir="$service_files_base_dir/$facility_name/$service_name";
my $service_file = "$service_files_dir/$service_name.csv";

# propagation destination
my $destination = $ARGV[1];
chomp($destination);

# create service lock
my $lock = ScriptLock->new($facility_name . "_" . $service_name . "_" . $destination);
($lock->lock() == 1) or die "Unable to get lock, service propagation was already running.";

# parse destination
my ($db_machine,$db_port,$db_name) = split(/:/, $destination);

# load authz
my $configPath = "/etc/perun/services/$service_name/$db_name";
open FILE, $configPath or die "Could not open config file $configPath: $!";
while(my $line = <FILE>) {
	if($line =~ /^username: .*/) {
		$username = ($line =~ m/^username: (.*)$/)[0];
	} elsif($line =~ /^password: .*/) {
		$password = ($line =~ m/^password: (.*)$/)[0];
	}
}

if(!defined($password) || !defined($username)) {
	print "Can't get config data from config file.\n";
	exit 14;
}

#Main Structure
my $dataByKeys = {};

open FILE, $service_file or die "Could not open $service_file: $!";
binmode FILE, ":utf8";
while(my $line = <FILE>) {
	my @parts = split /\t/, $line;
	chomp(@parts);
	$dataByKeys->{$parts[0]}->{'UCO_PERUN'} = $parts[1];
	$dataByKeys->{$parts[0]}->{'UCO_STAG'} = (($parts[2] ne '') ? $parts[2] : undef); # only students have OSB_ID_STAG
	$dataByKeys->{$parts[0]}->{'LOGIN'} = $parts[3];
	$dataByKeys->{$parts[0]}->{'EMAIL'} = $parts[4];
	$dataByKeys->{$parts[0]}->{'TYP_ZAZN'} = $parts[5];
	$dataByKeys->{$parts[0]}->{'TITLE_BEFORE'} = (($parts[6] ne '') ? $parts[6] : undef);
	$dataByKeys->{$parts[0]}->{'FIRST_NAME'} = (($parts[7] ne '') ? $parts[7] : undef);
	$dataByKeys->{$parts[0]}->{'LAST_NAME'} = (($parts[8] ne '') ? $parts[8] : undef);
	$dataByKeys->{$parts[0]}->{'TITLE_AFTER'} = (($parts[9] ne '') ? $parts[9] : undef);
	$dataByKeys->{$parts[0]}->{'BIRTH_LAST_NAME'} = (($parts[10] ne '') ? $parts[10] : undef);
	$dataByKeys->{$parts[0]}->{'BIRTH_NUMBER'} = (($parts[11] ne '') ? $parts[11] : undef);
	$dataByKeys->{$parts[0]}->{'GENDER'} = (($parts[12] ne '') ? $parts[12] : undef);
	$dataByKeys->{$parts[0]}->{'JOB'} = (($parts[13] ne '') ? $parts[13] : undef);
	$dataByKeys->{$parts[0]}->{'VZTAH_DO'} = (($parts[14] ne '') ? $parts[14] : undef);
	$dataByKeys->{$parts[0]}->{'PHONE'} = (($parts[15] ne '') ? $parts[15] : undef);
	$dataByKeys->{$parts[0]}->{'EMAIL_PRIV'} = (($parts[16] ne '') ? $parts[16] : undef);
	$dataByKeys->{$parts[0]}->{'PHONE_PRIV'} = (($parts[17] ne '') ? $parts[17] : undef);
	$dataByKeys->{$parts[0]}->{'CARD_PHOTO'} = (($parts[18] ne '') ? $parts[18] : undef);
}
close FILE;

my $dbh = DBI->connect("dbi:Oracle://$db_machine:$db_port/$db_name", $username, $password,{ RaiseError=>1, AutoCommit=>0, LongReadLen=>65536, ora_charset => 'AL32UTF8'}) or die "Connect to database $db_name Error!\n";
$dbh->do("alter session set nls_date_format='YYYY-MM-DD HH24:MI:SS'");

my $DEBUG=0;
#statistic and information variables
my $teachers_skipped = 0;
my $teachers_updated = 0;
my $teachers_nochange = 0;
my $teachers_inserted = 0;
my $students_skipped = 0;
my $students_updated = 0;
my $students_nochange = 0;

#update and insert new
foreach my $key (sort keys %$dataByKeys) {

	my $UCO_PERUN = $dataByKeys->{$key}->{'UCO_PERUN'};
	my $UCO_STAG = $dataByKeys->{$key}->{'UCO_STAG'};  # FIXME - OSB_ID_STAG - we do not set this!
	my $LOGIN = $dataByKeys->{$key}->{'LOGIN'};
	my $EMAIL = $dataByKeys->{$key}->{'EMAIL'};
	my $TYP_ZAZN = $dataByKeys->{$key}->{'TYP_ZAZN'};

	my $TITLE_BEFORE = $dataByKeys->{$key}->{'TITLE_BEFORE'};
	my $FIRST_NAME = $dataByKeys->{$key}->{'FIRST_NAME'};
	my $LAST_NAME = $dataByKeys->{$key}->{'LAST_NAME'};
	my $TITLE_AFTER = $dataByKeys->{$key}->{'TITLE_AFTER'};

	my $BIRTH_LAST_NAME = $dataByKeys->{$key}->{'BIRTH_LAST_NAME'};
	my $BIRTH_NUMBER = $dataByKeys->{$key}->{'BIRTH_NUMBER'};
	my $GENDER = $dataByKeys->{$key}->{'GENDER'};
	my $JOB = $dataByKeys->{$key}->{'JOB'};
	my $VZTAH_DO = $dataByKeys->{$key}->{'VZTAH_DO'};

	my $PHONE = $dataByKeys->{$key}->{'PHONE'};
	my $EMAIL_PRIV = $dataByKeys->{$key}->{'EMAIL_PRIV'};
	my $PHONE_PRIV = $dataByKeys->{$key}->{'PHONE_PRIV'};

	# TODO - not sure if we will use it
	my $IDCARD_PHOTO = $dataByKeys->{$key}->{'CARD_PHOTO'};

	if ($TYP_ZAZN eq "P") {

		unless(defined($UCO_PERUN)) {
			print "Teacher $key is missing UCO_PERUN.\n";
			$teachers_skipped++;
			next;
		}

		my $teacherExists = $dbh->prepare(qq{select 1 from $table_teacher where UCO_PERUN=?});
		$teacherExists->execute($UCO_PERUN);
		if($teacherExists->fetch) {

			# teacher found
			if ($DEBUG == 1) { print "FOUND: $key\n"; }

			my $select = "SELECT 1 from $table_teacher where UCO_PERUN=? and USERNAME=? and EMAIL_SKOLNI=? and TYP_ZAZN=?";
			my @params = ($UCO_PERUN, uc($LOGIN), $EMAIL, $TYP_ZAZN);

			$select = appendParam(select => $select, params => \@params, paramName => 'VZTAH_DO', paramValue => $VZTAH_DO);
			$select = appendParam(select => $select, params => \@params, paramName => 'JMENO', paramValue => $FIRST_NAME);
			$select = appendParam(select => $select, params => \@params, paramName => 'PRIJMENI', paramValue => $LAST_NAME);
			$select = appendParam(select => $select, params => \@params, paramName => 'ROD_PRIJMENI', paramValue => $BIRTH_LAST_NAME);
			$select = appendParam(select => $select, params => \@params, paramName => 'ROD_CISLO', paramValue => $BIRTH_NUMBER);
			$select = appendParam(select => $select, params => \@params, paramName => 'POHLAVI', paramValue => $GENDER);
			$select = appendParam(select => $select, params => \@params, paramName => 'TITUL_PRED', paramValue => $TITLE_BEFORE);
			$select = appendParam(select => $select, params => \@params, paramName => 'TITUL_ZA', paramValue => $TITLE_AFTER);
			$select = appendParam(select => $select, params => \@params, paramName => 'TEL_SKOLNI', paramValue => $PHONE);
			$select = appendParam(select => $select, params => \@params, paramName => 'EMAIL_SOUKR', paramValue => $EMAIL_PRIV);
			$select = appendParam(select => $select, params => \@params, paramName => 'TEL_SOUKR', paramValue => $PHONE_PRIV);

			my $recordsAreEquals = $dbh->prepare($select);
			$recordsAreEquals->execute(@params);

			if(!$recordsAreEquals->fetch) {

				# there is a change in data -> update whole entry since missing column in update would cause value deletion in the backend.
				if ($DEBUG == 1) { print "UPDATING EXISTING RECORD: $key\n"; }

				my $updateTeacher = $dbh->prepare(qq{UPDATE $table_teacher SET TYP_ZAZN=?, USERNAME=? , JMENO=? , PRIJMENI=? , ROD_PRIJMENI=? , ROD_CISLO=? , POHLAVI=? , TITUL_PRED=? , TITUL_ZA=? , EMAIL_SKOLNI=? , TEL_SKOLNI=? , EMAIL_SOUKR=? , TEL_SOUKR=? , FUNKCE=? , VZTAH_DO=? , ZMENENO_KDY=now() WHERE UCO_PERUN=?});
				$updateTeacher->execute(
					$TYP_ZAZN,
					uc($LOGIN),
					$FIRST_NAME,
					$LAST_NAME,
					$BIRTH_LAST_NAME,
					$BIRTH_NUMBER,
					$GENDER,
					$TITLE_BEFORE,
					$TITLE_AFTER,
					$EMAIL,
					$PHONE,
					$EMAIL_PRIV,
					$PHONE_PRIV,
					$VZTAH_DO,
					$UCO_PERUN);

				$teachers_updated++;

			} else {
				if ($DEBUG == 1) { print "KEEPING EXISTING RECORD: $key\n"; }
				$teachers_nochange++;
			}

		} else {

			if ($DEBUG == 1) { print "NOT FOUND, INSERTING: $key\n"; }
			# Teacher not yet in the table -> insert as a new person
			my $insertTeacher = $dbh->prepare(qq{INSERT INTO $table_teacher (UCO_PERUN, TYP_ZAZN, VZTAH_DO, USERNAME, JMENO, PRIJMENI, ROD_PRIJMENI, ROD_CISLO, POHLAVI, TITUL_PRED, TITUL_ZA, EMAIL_SKOLNI, TEL_SKOLNI, EMAIL_SOUKR, TEL_SOUKR, ZMENENO_KDY) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'now()')});
			$insertTeacher->execute($UCO_PERUN, $TYP_ZAZN, $VZTAH_DO, uc($LOGIN), $FIRST_NAME, $LAST_NAME, $BIRTH_LAST_NAME, $BIRTH_NUMBER, $GENDER, $TITLE_BEFORE, $TITLE_AFTER, $EMAIL, $PHONE, $EMAIL_PRIV, $PHONE_PRIV);

			$teachers_inserted++;

		}

	} elsif ($TYP_ZAZN eq "S") {

		unless(defined($BIRTH_NUMBER)) {
			print "Student $key is missing RC.\n";
			$students_skipped++;
			next;
		}

		unless(length($BIRTH_NUMBER) >= 9 && length($BIRTH_NUMBER) <= 10) {
			print "Student $key has wrong RC format.\n";
			$students_skipped++;
			next;
		}

		# We only select and update students in STAG, since they must exists and table is a view to live data!
		my $studentExists = $dbh->prepare(qq{select 1 from $table_student where ROD_CISLO=?});
		$studentExists->execute($BIRTH_NUMBER);
		if($studentExists->fetch) {

			# student found
			if ($DEBUG == 1) { print "FOUND: $key\n"; }

			# check if entry has same data
			my $select = "SELECT 1 from $table_student where UCO_PERUN=? and USERNAME=? and EMAIL_SKOLNI=? and ROD_CISLO=?";
			my @params = ($UCO_PERUN, uc($LOGIN), $EMAIL, $BIRTH_NUMBER);

			my $recordsAreEquals = $dbh->prepare($select);
			$recordsAreEquals->execute(@params);
			if(!$recordsAreEquals->fetch) {

				# there is a change in data -> update whole entry since missing column in update would cause value deletion in the backend.
				if ($DEBUG == 1) { print "UPDATING EXISTING RECORD: $key\n"; }

				my $updateStudent = $dbh->prepare(qq{UPDATE $table_student SET UCO_PERUN=? , USERNAME=? , EMAIL_SKOLNI=? WHERE ROD_CISLO=?});
				$updateStudent->execute(
					$UCO_PERUN,
					uc($LOGIN),
					$EMAIL,
					$BIRTH_NUMBER);

				$students_updated++;

			} else {
				if ($DEBUG == 1) { print "KEEPING EXISTING RECORD: $key\n"; }
				$students_nochange++;
			}

		} else {
			print "Student $key not exists in STAG by RC: $BIRTH_NUMBER\n";
			$students_skipped++;
		}

	} else {
		print "Unknown type of entry: $TYP_ZAZN for $key\n";
	}

}

#$dbh->rollback();
$dbh->commit();
$dbh->disconnect();

#Info about operations
print "=======================================\n";
print "Teachers skipped:\t$teachers_skipped\n";
print "Teachers inserted:\t$teachers_inserted\n";
print "Teachers updated:\t$teachers_updated\n";
print "Teachers no change:\t$teachers_nochange\n";
print "---------------------------------------\n";
print "Students skipped:\t$students_skipped\n";
print "Students updated:\t$students_updated\n";
print "Students no change:\t$students_nochange\n";
print "=======================================\n";

$lock->unlock();

#
# Appends PARAM with respecting to possible NULL to select
#
sub appendParam() {

	my %args = @_;
	my $select = $args{select};
	my $paramsRef = $args{params};
	my $paramName = $args{paramName};
	my $paramValue = $args{paramValue};

	if (defined($paramValue)) {
		$select = $select . " and $paramName=?";
		push(@$paramsRef, $paramValue);
	} else {
		$select = $select . " and $paramName is NULL";
	}

	return $select;

}
