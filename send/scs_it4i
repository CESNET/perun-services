#!/usr/local/bin/python3.11

import sys
import requests
import json
import send_lib
from json.decoder import JSONDecodeError

# FIXME - change to default python when we migrate to containers
SERVICE_NAME = "scs_it4i"

if __name__ == "__main__":

    send_lib.check_input_fields(sys.argv, True)

    facility = sys.argv[1]
    destination = sys.argv[2]
    destination_type = sys.argv[3]

    send_lib.check_destination_type_allowed(sys.argv[3], send_lib.DESTINATION_TYPE_URL)
    send_lib.check_destination_format(destination, destination_type)

    send_lib.create_lock(SERVICE_NAME, destination)

    # Import client config (file must have .py -> "scs_it4i.py")
    try:
        sys.path.insert(1, send_lib.SERVICES_DIR + "/" + SERVICE_NAME + "/")
        CLIENT_ID = __import__("scs_it4i").CLIENT_ID
        CLIENT_SECRET = __import__("scs_it4i").CLIENT_SECRET
        TOKEN_API = __import__("scs_it4i").TOKEN_API
    except ImportError as ie:
        # this means that config file does not exist
        print("Failed to import config! - " + ie.msg, file=sys.stderr)
        exit(1)

    if not CLIENT_ID:
        print("CLIENT_ID configuration is empty!", file=sys.stderr)
        exit(1)

    if not CLIENT_SECRET:
        print("CLIENT_SECRET configuration is empty!", file=sys.stderr)
        exit(1)

    if not TOKEN_API:
        print("TOKEN_API configuration is empty!", file=sys.stderr)
        exit(1)

    # Request authorization token via client_id/client_secret
    token_req = requests.post(
        TOKEN_API,
        data = {
            "client_id": CLIENT_ID,
            "client_secret": CLIENT_SECRET,
            "grant_type": "client_credentials"
        }
    )

    if token_req.status_code != 200:
        print("Unable to acquire token!", file=sys.stderr)
        exit(1)

    try:
        token_st = json.loads(token_req.text)
    except JSONDecodeError:
        print("Invalid token!", file=sys.stderr)
        exit(1)

    # read all lines at once
    service_files_dir = send_lib.get_gen_folder(facility, SERVICE_NAME)
    file = open(service_files_dir + "/scs_it4i", mode='r')
    all_of_it = file.read()
    file.close()

    try:
        all_of_it_json = json.loads(all_of_it)
    except JSONDecodeError:
        print("Invalid JSON in generated data!", file=sys.stderr)
        exit(1)

    # Call einfra-user-attr with auth token
    user_attr_req = requests.post(
        destination,
        headers = { "Authorization": "Bearer " + token_st["access_token"] },
        json = all_of_it_json
    )

    response = user_attr_req.text.strip()

    if user_attr_req.status_code != 200:
        print(f"Failed to import data ({response})", file=sys.stderr)

    else:
        print(f"Import succeeded ({response})")
