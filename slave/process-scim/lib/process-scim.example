#!/usr/bin/env python3
'''
EXAMPLE of python script for processing SCIM files from Perun
'''

import os
import sys
import json

''' Get paths to the input files: users_file groups_file '''
if len(sys.argv) != 3:
	print("Missing argument, usage: ./script path_to_users_file path_to_groups_file")
	exit(1)

users_file = sys.argv[1]
groups_file = sys.argv[2]

''' GETTING DATA FROM JSON '''
if not os.path.isfile(users_file):
	print("users_file {} doesn't exist").format(users_file)
	exit(1)
json_users = open(users_file)
users_data = json.load(json_users)
json_users.close()

if not os.path.isfile(groups_file):
	print("groups_file {} doesn't exist").format(groups_file)
	exit(1)
json_groups = open(groups_file)
groups_data = json.load(json_groups)
json_groups.close()

''' PARSING DATA FROM users.scim '''
for item in users_data:
	user_json_ids.append(int(item['id']))
	tmp_user = User()
	tmp_user.displayName = (item['displayName'])
	tmp_user.mail = (item['mail'])
	tmp_user.status = (item['status'])
	tmp_user.external_id = int(item['id'])
	users_list.append(tmp_user)

	for i in item['identities']:
		identities_json.append(i)
		tmp_identity = Identity()
		tmp_identity.login = i
		tmp_identity.external_id = int(item['id'])
		# Users will be available in list variable identities_list
		identities_list.append(tmp_identity)

''' PARSING DATA FROM groups.scim '''		
for item in groups_data:
	group_json_ids.append(int(item['id']))
	tmp_group = Group()
	tmp_group.name = (item['name'])
	tmp_group.external_id = int(item['id'])
	
	if item['parentGroupId'] is None:
		tmp_group.parent_group_id = None
	else:
		tmp_group.parent_group_id = int(item['parentGroupId'])
		#This removes prefix of parent group exported from perun, that is not suitable
		tmp_group.name = tmp_group.name.split(':')[-1]

	groups_list.append(tmp_group)
	
	for i in item['members']:
		tmp_user_in_group = UserInGroup()
		tmp_user_in_group.user_external_id = int(i['userId'])
		tmp_user_in_group.group_external_id = int(item['id'])
		# Groups will be available in list variable users_in_groups_list
		users_in_groups_list_list.append(tmp_user_in_group)
